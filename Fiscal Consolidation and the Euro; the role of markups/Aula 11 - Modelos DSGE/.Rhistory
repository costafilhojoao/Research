install.packages("gEcon")
install.packages("C:/Users/jcfil/Downloads/gEcon_1.2.0.zip", repos = NULL, type = "win.binary")
library(gEcon)
install.packages("nleqslv")
library(gEcon)
install.packages("C:/Users/jcfil/Downloads/gEcon.estimation_0.1.0.zip", repos = NULL, type = "win.binary")
# load gEcon package
library(gEcon)
# make and load the model
hp <- make_model("home_production.gcn")
# make and load the model
hp <- make_model("home_production.gcn")
View(hp)
# set initial values
hp <- initval_var(hp, list(N = 0.5,
N_h = 0.25,
N_m = 0.25))
# find and print steady-state values
hp <- steady_state(hp)
get_ss_values(hp, to_tex = TRUE)
# find and print perturbation solution
hp <- solve_pert(model = hp, loglin = TRUE)
get_pert_solution(hp, to_tex = TRUE)
# set the shock distribution parameters
hp <- set_shock_cov_mat(hp,
cov_matrix = matrix(c(0.49, 0.33, 0.33, 0.49), 2, 2),
shock_order = c("epsilon_h", "epsilon_m"))
shock_info(hp, all = TRUE)
# compute and print correlations
hp <- compute_model_stats(hp, ref_var = "Y")
get_model_stats(model = hp,
variables = c("C_m", "C_h", "Y", "I_m", "I_h",
"K_m", "K_h", "N_m", "N_h", "W"),
to_tex = TRUE)
# compute and print the IRFs
hp_irf <- compute_irf(model = hp,
variables = c("C_m", "C_h", "Y", "I_m", "I_h",
"K_m", "K_h", "N_m", "N_h", "W"))
plot_simulation(hp_irf, to_eps = TRUE)
# print summary of the model results
summary(hp)
# copy the example to the current working directory
file.copy(from = file.path(system.file("examples", package = "gEcon.estimation"),
"dsge_model.gcn"), to = getwd())
dsge_model <- make_model("dsge_model.gcn")
# solve the model
dsge_model <- steady_state(dsge_model)
dsge_model <- solve_pert(dsge_model, loglin = TRUE)
# set the stochastic shocks distribution parameters
dsge_model <- set_shock_distr_par(dsge_model,
distr_par = list("sd( epsilon_G )" = 0.01,
"sd( epsilon_Z )" = 0.01))
shock_info(model = dsge_model, all = TRUE)
# ###################################################################
# 2. simulate the model to obtain data for the estimation
# choose variables of interest
set.seed(250)
series_length <- 150
# ###################################################################
# 2. simulate the model to obtain data for the estimation
# choose variables of interest
set.seed(1301)
series_length <- 150
observables <- c("Y", "G")
# simulate random path
dsge_simulation <- random_path(model = dsge_model,
sim_length = series_length,
variables = observables)
model_data <- get_simulation_results(dsge_simulation)
# create data set to be used for estimation (ts object)
estimation_data <- ts(data = t(model_data)[, observables],
start = c(1973, 1),
frequency = 4, names = observables)
View(estimation_data)
# remove mean from the data series
mean_var <- matrix(apply(estimation_data, 2, mean),
byrow = TRUE,
nrow = nrow(estimation_data),
ncol = ncol(estimation_data))
estimation_data <- estimation_data - mean_var
# ###################################################################
# 3. declare prior distribution
dsge_prior <- gecon_prior(
prior_list = list(
list(par = "sd(epsilon_Z)", type = "inv_gamma",
mean = 0.012, sd = 0.3, lower_bound = 0.0001,
upper_bound = 0.9, initial = 0.0012),
list(par = "sd(epsilon_G)", type = "inv_gamma",
mean = 0.008, sd = 0.3, lower_bound = 0.0001,
upper_bound = 0.9, initial = 0.006),
list(par = "omega", type = "normal",mean = 1.45, sd = 0.1, lower_bound = 1,
upper_bound = 2, initial = 1.5),
list(par = "phi_G", type = "beta",
mean = 0.88, sd = 0.03, lower_bound = 0.5,
upper_bound = 0.999, initial = 0.95),
list(par = "phi_Z", type = "beta",
mean = 0.92, sd = 0.03, lower_bound = 0.5,
upper_bound = 0.999, initial = 0.95)),
model = dsge_model)
library(gEcon.estimation)
library(gEcon.estimation)
library(gEcon.estimation)
# ###################################################################
# 3. declare prior distribution
dsge_prior <- gecon_prior(
prior_list = list(
list(par = "sd(epsilon_Z)", type = "inv_gamma",
mean = 0.012, sd = 0.3, lower_bound = 0.0001,
upper_bound = 0.9, initial = 0.0012),
list(par = "sd(epsilon_G)", type = "inv_gamma",
mean = 0.008, sd = 0.3, lower_bound = 0.0001,
upper_bound = 0.9, initial = 0.006),
list(par = "omega", type = "normal",mean = 1.45, sd = 0.1, lower_bound = 1,
upper_bound = 2, initial = 1.5),
list(par = "phi_G", type = "beta",
mean = 0.88, sd = 0.03, lower_bound = 0.5,
upper_bound = 0.999, initial = 0.95),
list(par = "phi_Z", type = "beta",
mean = 0.92, sd = 0.03, lower_bound = 0.5,
upper_bound = 0.999, initial = 0.95)),
model = dsge_model)
detach("package:gEcon.estimation", unload = TRUE)
library(gEcon.estimation)
# ###################################################################
# 3. declare prior distribution
dsge_prior <- gecon_prior(
prior_list = list(
list(par = "sd(epsilon_Z)", type = "inv_gamma",
mean = 0.012, sd = 0.3, lower_bound = 0.0001,
upper_bound = 0.9, initial = 0.0012),
list(par = "sd(epsilon_G)", type = "inv_gamma",
mean = 0.008, sd = 0.3, lower_bound = 0.0001,
upper_bound = 0.9, initial = 0.006),
list(par = "omega", type = "normal",mean = 1.45, sd = 0.1, lower_bound = 1,
upper_bound = 2, initial = 1.5),
list(par = "phi_G", type = "beta",
mean = 0.88, sd = 0.03, lower_bound = 0.5,
upper_bound = 0.999, initial = 0.95),
list(par = "phi_Z", type = "beta",
mean = 0.92, sd = 0.03, lower_bound = 0.5,
upper_bound = 0.999, initial = 0.95)),
model = dsge_model)
# ###################################################################
# 3. declare prior distribution
dsge_prior <- gecon_prior(
prior_list = list(
list(par = "sd(epsilon_Z)", type = "inv_gamma",
mean = 0.012, sd = 0.3, lower_bound = 0.0001,
upper_bound = 0.9, initial = 0.0012),
list(par = "sd(epsilon_G)", type = "inv_gamma",
mean = 0.008, sd = 0.3, lower_bound = 0.0001,
upper_bound = 0.9, initial = 0.006),
list(par = "omega", type = "normal",mean = 1.45, sd = 0.1, lower_bound = 1,
upper_bound = 2, initial = 1.5),
list(par = "phi_G", type = "beta",
mean = 0.88, sd = 0.03, lower_bound = 0.5,
upper_bound = 0.999, initial = 0.95),
list(par = "phi_Z", type = "beta",
mean = 0.92, sd = 0.03, lower_bound = 0.5,
upper_bound = 0.999, initial = 0.95)),
model = dsge_model)
detach("package:gEcon.estimation", unload = TRUE)
library(gEcon.estimation)
install.packages("parallel")
install.packages("KFAS")
# ###################################################################
# 3. declare prior distribution
dsge_prior <- gecon_prior(
prior_list = list(
list(par = "sd(epsilon_Z)", type = "inv_gamma",
mean = 0.012, sd = 0.3, lower_bound = 0.0001,
upper_bound = 0.9, initial = 0.0012),
list(par = "sd(epsilon_G)", type = "inv_gamma",
mean = 0.008, sd = 0.3, lower_bound = 0.0001,
upper_bound = 0.9, initial = 0.006),
list(par = "omega", type = "normal",mean = 1.45, sd = 0.1, lower_bound = 1,
upper_bound = 2, initial = 1.5),
list(par = "phi_G", type = "beta",
mean = 0.88, sd = 0.03, lower_bound = 0.5,
upper_bound = 0.999, initial = 0.95),
list(par = "phi_Z", type = "beta",
mean = 0.92, sd = 0.03, lower_bound = 0.5,
upper_bound = 0.999, initial = 0.95)),
model = dsge_model)
library(gEcon.estimation)
# ###################################################################
# 3. declare prior distribution
dsge_prior <- gecon_prior(
prior_list = list(
list(par = "sd(epsilon_Z)", type = "inv_gamma",
mean = 0.012, sd = 0.3, lower_bound = 0.0001,
upper_bound = 0.9, initial = 0.0012),
list(par = "sd(epsilon_G)", type = "inv_gamma",
mean = 0.008, sd = 0.3, lower_bound = 0.0001,
upper_bound = 0.9, initial = 0.006),
list(par = "omega", type = "normal",mean = 1.45, sd = 0.1, lower_bound = 1,
upper_bound = 2, initial = 1.5),
list(par = "phi_G", type = "beta",
mean = 0.88, sd = 0.03, lower_bound = 0.5,
upper_bound = 0.999, initial = 0.95),
list(par = "phi_Z", type = "beta",
mean = 0.92, sd = 0.03, lower_bound = 0.5,
upper_bound = 0.999, initial = 0.95)),
model = dsge_model)
detach("package:gEcon.estimation", unload = TRUE)
remove.packages("gEcon.estimation", lib="~/R/win-library/3.6")
install.packages("C:/Users/jcfil/Downloads/gEcon.estimation_0.1.0.zip", repos = NULL, type = "win.binary")
library(gEcon.estimation)
remove.packages("gEcon.estimation", lib="~/R/win-library/3.6")
install.packages("C:/Users/jcfil/Downloads/gEcon.estimation_0.1.0.zip", repos = NULL, type = "win.binary")
library(gEcon.estimation)
install.packages("doParallel")
library(gEcon.estimation)
install.packages("FKF")
library(gEcon.estimation)
# ###################################################################
# 3. declare prior distribution
dsge_prior <- gecon_prior(
prior_list = list(
list(par = "sd(epsilon_Z)", type = "inv_gamma",
mean = 0.012, sd = 0.3, lower_bound = 0.0001,
upper_bound = 0.9, initial = 0.0012),
list(par = "sd(epsilon_G)", type = "inv_gamma",
mean = 0.008, sd = 0.3, lower_bound = 0.0001,
upper_bound = 0.9, initial = 0.006),
list(par = "omega", type = "normal",mean = 1.45, sd = 0.1, lower_bound = 1,
upper_bound = 2, initial = 1.5),
list(par = "phi_G", type = "beta",
mean = 0.88, sd = 0.03, lower_bound = 0.5,
upper_bound = 0.999, initial = 0.95),
list(par = "phi_Z", type = "beta",
mean = 0.92, sd = 0.03, lower_bound = 0.5,
upper_bound = 0.999, initial = 0.95)),
model = dsge_model)
plot_prior(dsge_prior)
# ###################################################################
# 4. estimate the model (Bayesian estimation)
estimation_result <- bayesian_estimation(data_set = estimation_data,
optim_options_list = list(solver = "csminwel"),
mcmc_options_list = list(chain_length = 1000,
burn = 200,
cores = 2, chains = 2,
scale = rep(0.5, 5)),
observables = observables,
model = dsge_model,
prior = dsge_prior)
plot_posterior(estimation_result)
#
# true model parameters were:
# sd(epsilon_Z) 0.01
# sd(epsilon_G) 0.01
# omega 1.45
# phi_G 0.9
# phi_Z 0.9
est_par <- get_estimated_par(estimation_result)
free_par <- est_par$free_par
shock_distr_par <- est_par$shock_distr_par
estimated_dsge_model <- set_free_par(dsge_model, free_par = free_par)
estimated_dsge_model <- set_shock_distr_par(estimated_dsge_model, distr_par = shock_distr_par)
estimated_dsge_model <- steady_state(estimated_dsge_model)
estimated_dsge_model <- solve_pert(estimated_dsge_model, loglin = TRUE)
# ###################################################################
# 5. historical shock decomposition and variable smoothing
# find historical shock decomposition
dsge_shock_decomp <- shock_decomposition(model = estimated_dsge_model,
data_set = window(estimation_data,
start = c(2004, 1),
end = c(2010, 1),
frequency = 4),
observables = observables,
variables = observables)
plot_shock_decomposition(dsge_shock_decomp)
# use Kalman smoother to obtain smoothed variables' values
dsge_smoothed_variables <- smoother(model = estimated_dsge_model,
data_set = estimation_data,
observables = c("Y", "G"),
variables = c("K", "I", "C"))
# print smoothed shocks' values
dsge_smoothed_variables$smoothed_shock
# print smoothed variables' values
dsge_smoothed_variables$smoothed_var
# print the MSE matrix
dsge_smoothed_variables$MSE
# ###################################################################
# 6. forecast using the model
# forecast using point estimates of parameters
fc_res <- forecast(model = estimated_dsge_model,
data_set = estimation_data,
observables = observables,
variables = c("Y", "G"),
horizon = 20)
# forecast using posterior distribution
fc_res_post <- forecast_posterior(est_results = estimation_result,
data_set = estimation_data,
observables = observables,
variables = c("Y", "G"),
horizon = 20)
# plot forecasts
plot_forecast(fc_res_post)
plot_forecast(fc_res)
?bayesian_estimation
?smoother
?forecast_posterior
save.image("~/2020 1 Bayesian Econometrics/Aulas/Aula 11 - Modelos DSGE/Aula11.RData")
?save.image
