%
% Status : main Dynare file
%
% Warning : this file is generated automatically by Dynare
%           from model file (.mod)

clearvars -global
clear_persistent_variables(fileparts(which('dynare')), false)
tic0 = tic;
% Define global variables.
global M_ options_ oo_ estim_params_ bayestopt_ dataset_ dataset_info estimation_info
options_ = [];
M_.fname = 'solve';
M_.dynare_version = '6.2';
oo_.dynare_version = '6.2';
options_.dynare_version = '6.2';
%
% Some global variables initialization
%
global_initialization;
M_.exo_names = cell(4,1);
M_.exo_names_tex = cell(4,1);
M_.exo_names_long = cell(4,1);
M_.exo_names(1) = {'muc_innov'};
M_.exo_names_tex(1) = {'muc\_innov'};
M_.exo_names_long(1) = {'muc_innov'};
M_.exo_names(2) = {'mun_innov'};
M_.exo_names_tex(2) = {'mun\_innov'};
M_.exo_names_long(2) = {'mun_innov'};
M_.exo_names(3) = {'mul_innov'};
M_.exo_names_tex(3) = {'mul\_innov'};
M_.exo_names_long(3) = {'mul_innov'};
M_.exo_names(4) = {'ro_innov'};
M_.exo_names_tex(4) = {'ro\_innov'};
M_.exo_names_long(4) = {'ro_innov'};
M_.endo_names = cell(98,1);
M_.endo_names_tex = cell(98,1);
M_.endo_names_long = cell(98,1);
M_.endo_names(1) = {'y'};
M_.endo_names_tex(1) = {'y'};
M_.endo_names_long(1) = {'y'};
M_.endo_names(2) = {'k'};
M_.endo_names_tex(2) = {'k'};
M_.endo_names_long(2) = {'k'};
M_.endo_names(3) = {'n'};
M_.endo_names_tex(3) = {'n'};
M_.endo_names_long(3) = {'n'};
M_.endo_names(4) = {'w'};
M_.endo_names_tex(4) = {'w'};
M_.endo_names_long(4) = {'w'};
M_.endo_names(5) = {'rk'};
M_.endo_names_tex(5) = {'rk'};
M_.endo_names_long(5) = {'rk'};
M_.endo_names(6) = {'x'};
M_.endo_names_tex(6) = {'x'};
M_.endo_names_long(6) = {'x'};
M_.endo_names(7) = {'c'};
M_.endo_names_tex(7) = {'c'};
M_.endo_names_long(7) = {'c'};
M_.endo_names(8) = {'s'};
M_.endo_names_tex(8) = {'s'};
M_.endo_names_long(8) = {'s'};
M_.endo_names(9) = {'i'};
M_.endo_names_tex(9) = {'i'};
M_.endo_names_long(9) = {'i'};
M_.endo_names(10) = {'r'};
M_.endo_names_tex(10) = {'r'};
M_.endo_names_long(10) = {'r'};
M_.endo_names(11) = {'ns'};
M_.endo_names_tex(11) = {'ns'};
M_.endo_names_long(11) = {'ns'};
M_.endo_names(12) = {'ni'};
M_.endo_names_tex(12) = {'ni'};
M_.endo_names_long(12) = {'ni'};
M_.endo_names(13) = {'nr'};
M_.endo_names_tex(13) = {'nr'};
M_.endo_names_long(13) = {'nr'};
M_.endo_names(14) = {'cs'};
M_.endo_names_tex(14) = {'cs'};
M_.endo_names_long(14) = {'cs'};
M_.endo_names(15) = {'ci'};
M_.endo_names_tex(15) = {'ci'};
M_.endo_names_long(15) = {'ci'};
M_.endo_names(16) = {'cr'};
M_.endo_names_tex(16) = {'cr'};
M_.endo_names_long(16) = {'cr'};
M_.endo_names(17) = {'tau'};
M_.endo_names_tex(17) = {'tau'};
M_.endo_names_long(17) = {'tau'};
M_.endo_names(18) = {'lambtilde'};
M_.endo_names_tex(18) = {'lambtilde'};
M_.endo_names_long(18) = {'lambtilde'};
M_.endo_names(19) = {'lamtau'};
M_.endo_names_tex(19) = {'lamtau'};
M_.endo_names_long(19) = {'lamtau'};
M_.endo_names(20) = {'lami'};
M_.endo_names_tex(20) = {'lami'};
M_.endo_names_long(20) = {'lami'};
M_.endo_names(21) = {'lams'};
M_.endo_names_tex(21) = {'lams'};
M_.endo_names_long(21) = {'lams'};
M_.endo_names(22) = {'lamr'};
M_.endo_names_tex(22) = {'lamr'};
M_.endo_names_long(22) = {'lamr'};
M_.endo_names(23) = {'dd'};
M_.endo_names_tex(23) = {'dd'};
M_.endo_names_long(23) = {'dd'};
M_.endo_names(24) = {'pop'};
M_.endo_names_tex(24) = {'pop'};
M_.endo_names_long(24) = {'pop'};
M_.endo_names(25) = {'Rb'};
M_.endo_names_tex(25) = {'Rb'};
M_.endo_names_long(25) = {'Rb'};
M_.endo_names(26) = {'pie'};
M_.endo_names_tex(26) = {'pie'};
M_.endo_names_long(26) = {'pie'};
M_.endo_names(27) = {'mc'};
M_.endo_names_tex(27) = {'mc'};
M_.endo_names_long(27) = {'mc'};
M_.endo_names(28) = {'F'};
M_.endo_names_tex(28) = {'F'};
M_.endo_names_long(28) = {'F'};
M_.endo_names(29) = {'Kf'};
M_.endo_names_tex(29) = {'Kf'};
M_.endo_names_long(29) = {'Kf'};
M_.endo_names(30) = {'rr'};
M_.endo_names_tex(30) = {'rr'};
M_.endo_names_long(30) = {'rr'};
M_.endo_names(31) = {'dcs'};
M_.endo_names_tex(31) = {'dcs'};
M_.endo_names_long(31) = {'dcs'};
M_.endo_names(32) = {'dns'};
M_.endo_names_tex(32) = {'dns'};
M_.endo_names_long(32) = {'dns'};
M_.endo_names(33) = {'dci'};
M_.endo_names_tex(33) = {'dci'};
M_.endo_names_long(33) = {'dci'};
M_.endo_names(34) = {'dni'};
M_.endo_names_tex(34) = {'dni'};
M_.endo_names_long(34) = {'dni'};
M_.endo_names(35) = {'dw'};
M_.endo_names_tex(35) = {'dw'};
M_.endo_names_long(35) = {'dw'};
M_.endo_names(36) = {'dlams'};
M_.endo_names_tex(36) = {'dlams'};
M_.endo_names_long(36) = {'dlams'};
M_.endo_names(37) = {'dlamtau'};
M_.endo_names_tex(37) = {'dlamtau'};
M_.endo_names_long(37) = {'dlamtau'};
M_.endo_names(38) = {'dlambtilde'};
M_.endo_names_tex(38) = {'dlambtilde'};
M_.endo_names_long(38) = {'dlambtilde'};
M_.endo_names(39) = {'dlami'};
M_.endo_names_tex(39) = {'dlami'};
M_.endo_names_long(39) = {'dlami'};
M_.endo_names(40) = {'dlamr'};
M_.endo_names_tex(40) = {'dlamr'};
M_.endo_names_long(40) = {'dlamr'};
M_.endo_names(41) = {'dcr'};
M_.endo_names_tex(41) = {'dcr'};
M_.endo_names_long(41) = {'dcr'};
M_.endo_names(42) = {'dnr'};
M_.endo_names_tex(42) = {'dnr'};
M_.endo_names_long(42) = {'dnr'};
M_.endo_names(43) = {'drk'};
M_.endo_names_tex(43) = {'drk'};
M_.endo_names_long(43) = {'drk'};
M_.endo_names(44) = {'dF'};
M_.endo_names_tex(44) = {'dF'};
M_.endo_names_long(44) = {'dF'};
M_.endo_names(45) = {'dKf'};
M_.endo_names_tex(45) = {'dKf'};
M_.endo_names_long(45) = {'dKf'};
M_.endo_names(46) = {'pbreve'};
M_.endo_names_tex(46) = {'pbreve'};
M_.endo_names_long(46) = {'pbreve'};
M_.endo_names(47) = {'dpie'};
M_.endo_names_tex(47) = {'dpie'};
M_.endo_names_long(47) = {'dpie'};
M_.endo_names(48) = {'muc'};
M_.endo_names_tex(48) = {'muc'};
M_.endo_names_long(48) = {'muc'};
M_.endo_names(49) = {'mun'};
M_.endo_names_tex(49) = {'mun'};
M_.endo_names_long(49) = {'mun'};
M_.endo_names(50) = {'mul'};
M_.endo_names_tex(50) = {'mul'};
M_.endo_names_long(50) = {'mul'};
M_.endo_names(51) = {'ro'};
M_.endo_names_tex(51) = {'ro'};
M_.endo_names_long(51) = {'ro'};
M_.endo_names(52) = {'yF'};
M_.endo_names_tex(52) = {'yF'};
M_.endo_names_long(52) = {'yF'};
M_.endo_names(53) = {'kF'};
M_.endo_names_tex(53) = {'kF'};
M_.endo_names_long(53) = {'kF'};
M_.endo_names(54) = {'nF'};
M_.endo_names_tex(54) = {'nF'};
M_.endo_names_long(54) = {'nF'};
M_.endo_names(55) = {'wF'};
M_.endo_names_tex(55) = {'wF'};
M_.endo_names_long(55) = {'wF'};
M_.endo_names(56) = {'rkF'};
M_.endo_names_tex(56) = {'rkF'};
M_.endo_names_long(56) = {'rkF'};
M_.endo_names(57) = {'xF'};
M_.endo_names_tex(57) = {'xF'};
M_.endo_names_long(57) = {'xF'};
M_.endo_names(58) = {'cF'};
M_.endo_names_tex(58) = {'cF'};
M_.endo_names_long(58) = {'cF'};
M_.endo_names(59) = {'sF'};
M_.endo_names_tex(59) = {'sF'};
M_.endo_names_long(59) = {'sF'};
M_.endo_names(60) = {'iF'};
M_.endo_names_tex(60) = {'iF'};
M_.endo_names_long(60) = {'iF'};
M_.endo_names(61) = {'rF'};
M_.endo_names_tex(61) = {'rF'};
M_.endo_names_long(61) = {'rF'};
M_.endo_names(62) = {'nsF'};
M_.endo_names_tex(62) = {'nsF'};
M_.endo_names_long(62) = {'nsF'};
M_.endo_names(63) = {'niF'};
M_.endo_names_tex(63) = {'niF'};
M_.endo_names_long(63) = {'niF'};
M_.endo_names(64) = {'nrF'};
M_.endo_names_tex(64) = {'nrF'};
M_.endo_names_long(64) = {'nrF'};
M_.endo_names(65) = {'csF'};
M_.endo_names_tex(65) = {'csF'};
M_.endo_names_long(65) = {'csF'};
M_.endo_names(66) = {'ciF'};
M_.endo_names_tex(66) = {'ciF'};
M_.endo_names_long(66) = {'ciF'};
M_.endo_names(67) = {'crF'};
M_.endo_names_tex(67) = {'crF'};
M_.endo_names_long(67) = {'crF'};
M_.endo_names(68) = {'tauF'};
M_.endo_names_tex(68) = {'tauF'};
M_.endo_names_long(68) = {'tauF'};
M_.endo_names(69) = {'lambtildeF'};
M_.endo_names_tex(69) = {'lambtildeF'};
M_.endo_names_long(69) = {'lambtildeF'};
M_.endo_names(70) = {'lamtauF'};
M_.endo_names_tex(70) = {'lamtauF'};
M_.endo_names_long(70) = {'lamtauF'};
M_.endo_names(71) = {'lamiF'};
M_.endo_names_tex(71) = {'lamiF'};
M_.endo_names_long(71) = {'lamiF'};
M_.endo_names(72) = {'lamsF'};
M_.endo_names_tex(72) = {'lamsF'};
M_.endo_names_long(72) = {'lamsF'};
M_.endo_names(73) = {'lamrF'};
M_.endo_names_tex(73) = {'lamrF'};
M_.endo_names_long(73) = {'lamrF'};
M_.endo_names(74) = {'ddF'};
M_.endo_names_tex(74) = {'ddF'};
M_.endo_names_long(74) = {'ddF'};
M_.endo_names(75) = {'popF'};
M_.endo_names_tex(75) = {'popF'};
M_.endo_names_long(75) = {'popF'};
M_.endo_names(76) = {'RbF'};
M_.endo_names_tex(76) = {'RbF'};
M_.endo_names_long(76) = {'RbF'};
M_.endo_names(77) = {'pieF'};
M_.endo_names_tex(77) = {'pieF'};
M_.endo_names_long(77) = {'pieF'};
M_.endo_names(78) = {'mcF'};
M_.endo_names_tex(78) = {'mcF'};
M_.endo_names_long(78) = {'mcF'};
M_.endo_names(79) = {'FF'};
M_.endo_names_tex(79) = {'FF'};
M_.endo_names_long(79) = {'FF'};
M_.endo_names(80) = {'KfF'};
M_.endo_names_tex(80) = {'KfF'};
M_.endo_names_long(80) = {'KfF'};
M_.endo_names(81) = {'rrF'};
M_.endo_names_tex(81) = {'rrF'};
M_.endo_names_long(81) = {'rrF'};
M_.endo_names(82) = {'dcsF'};
M_.endo_names_tex(82) = {'dcsF'};
M_.endo_names_long(82) = {'dcsF'};
M_.endo_names(83) = {'dnsF'};
M_.endo_names_tex(83) = {'dnsF'};
M_.endo_names_long(83) = {'dnsF'};
M_.endo_names(84) = {'dciF'};
M_.endo_names_tex(84) = {'dciF'};
M_.endo_names_long(84) = {'dciF'};
M_.endo_names(85) = {'dniF'};
M_.endo_names_tex(85) = {'dniF'};
M_.endo_names_long(85) = {'dniF'};
M_.endo_names(86) = {'dwF'};
M_.endo_names_tex(86) = {'dwF'};
M_.endo_names_long(86) = {'dwF'};
M_.endo_names(87) = {'dlamsF'};
M_.endo_names_tex(87) = {'dlamsF'};
M_.endo_names_long(87) = {'dlamsF'};
M_.endo_names(88) = {'dlamtauF'};
M_.endo_names_tex(88) = {'dlamtauF'};
M_.endo_names_long(88) = {'dlamtauF'};
M_.endo_names(89) = {'dlambtildeF'};
M_.endo_names_tex(89) = {'dlambtildeF'};
M_.endo_names_long(89) = {'dlambtildeF'};
M_.endo_names(90) = {'dlamiF'};
M_.endo_names_tex(90) = {'dlamiF'};
M_.endo_names_long(90) = {'dlamiF'};
M_.endo_names(91) = {'dlamrF'};
M_.endo_names_tex(91) = {'dlamrF'};
M_.endo_names_long(91) = {'dlamrF'};
M_.endo_names(92) = {'dcrF'};
M_.endo_names_tex(92) = {'dcrF'};
M_.endo_names_long(92) = {'dcrF'};
M_.endo_names(93) = {'dnrF'};
M_.endo_names_tex(93) = {'dnrF'};
M_.endo_names_long(93) = {'dnrF'};
M_.endo_names(94) = {'drkF'};
M_.endo_names_tex(94) = {'drkF'};
M_.endo_names_long(94) = {'drkF'};
M_.endo_names(95) = {'dFF'};
M_.endo_names_tex(95) = {'dFF'};
M_.endo_names_long(95) = {'dFF'};
M_.endo_names(96) = {'dKfF'};
M_.endo_names_tex(96) = {'dKfF'};
M_.endo_names_long(96) = {'dKfF'};
M_.endo_names(97) = {'pbreveF'};
M_.endo_names_tex(97) = {'pbreveF'};
M_.endo_names_long(97) = {'pbreveF'};
M_.endo_names(98) = {'dpieF'};
M_.endo_names_tex(98) = {'dpieF'};
M_.endo_names_long(98) = {'dpieF'};
M_.endo_partitions = struct();
M_.param_names = cell(21,1);
M_.param_names_tex = cell(21,1);
M_.param_names_long = cell(21,1);
M_.param_names(1) = {'xi'};
M_.param_names_tex(1) = {'xi'};
M_.param_names_long(1) = {'xi'};
M_.param_names(2) = {'rpi'};
M_.param_names_tex(2) = {'rpi'};
M_.param_names_long(2) = {'rpi'};
M_.param_names(3) = {'rx'};
M_.param_names_tex(3) = {'rx'};
M_.param_names_long(3) = {'rx'};
M_.param_names(4) = {'gam'};
M_.param_names_tex(4) = {'gam'};
M_.param_names_long(4) = {'gam'};
M_.param_names(5) = {'pi1'};
M_.param_names_tex(5) = {'pi1'};
M_.param_names_long(5) = {'pi1'};
M_.param_names(6) = {'pi2'};
M_.param_names_tex(6) = {'pi2'};
M_.param_names_long(6) = {'pi2'};
M_.param_names(7) = {'pi3'};
M_.param_names_tex(7) = {'pi3'};
M_.param_names_long(7) = {'pi3'};
M_.param_names(8) = {'pir'};
M_.param_names_tex(8) = {'pir'};
M_.param_names_long(8) = {'pir'};
M_.param_names(9) = {'pid'};
M_.param_names_tex(9) = {'pid'};
M_.param_names_long(9) = {'pid'};
M_.param_names(10) = {'betta'};
M_.param_names_tex(10) = {'betta'};
M_.param_names_long(10) = {'betta'};
M_.param_names(11) = {'i_ini'};
M_.param_names_tex(11) = {'i\_ini'};
M_.param_names_long(11) = {'i_ini'};
M_.param_names(12) = {'A'};
M_.param_names_tex(12) = {'A'};
M_.param_names_long(12) = {'A'};
M_.param_names(13) = {'theta'};
M_.param_names_tex(13) = {'theta'};
M_.param_names_long(13) = {'theta'};
M_.param_names(14) = {'alfa'};
M_.param_names_tex(14) = {'alfa'};
M_.param_names_long(14) = {'alfa'};
M_.param_names(15) = {'inc_target'};
M_.param_names_tex(15) = {'inc\_target'};
M_.param_names_long(15) = {'inc_target'};
M_.param_names(16) = {'n_target'};
M_.param_names_tex(16) = {'n\_target'};
M_.param_names_long(16) = {'n_target'};
M_.param_names(17) = {'delta'};
M_.param_names_tex(17) = {'delta'};
M_.param_names_long(17) = {'delta'};
M_.param_names(18) = {'g_ss'};
M_.param_names_tex(18) = {'g\_ss'};
M_.param_names_long(18) = {'g_ss'};
M_.param_names(19) = {'eta'};
M_.param_names_tex(19) = {'eta'};
M_.param_names_long(19) = {'eta'};
M_.param_names(20) = {'xi_flex'};
M_.param_names_tex(20) = {'xi\_flex'};
M_.param_names_long(20) = {'xi_flex'};
M_.param_names(21) = {'ro_ini'};
M_.param_names_tex(21) = {'ro\_ini'};
M_.param_names_long(21) = {'ro_ini'};
M_.param_partitions = struct();
M_.exo_det_nbr = 0;
M_.exo_nbr = 4;
M_.endo_nbr = 98;
M_.param_nbr = 21;
M_.orig_endo_nbr = 98;
M_.aux_vars = [];
M_.Sigma_e = zeros(4, 4);
M_.Correlation_matrix = eye(4, 4);
M_.H = 0;
M_.Correlation_matrix_ME = 1;
M_.sigma_e_is_diagonal = true;
M_.det_shocks = [];
M_.surprise_shocks = [];
M_.learnt_shocks = [];
M_.learnt_endval = [];
M_.heteroskedastic_shocks.Qvalue_orig = [];
M_.heteroskedastic_shocks.Qscale_orig = [];
M_.matched_irfs = {};
M_.matched_irfs_weights = {};
options_.linear = false;
options_.block = false;
options_.bytecode = false;
options_.use_dll = false;
options_.ramsey_policy = false;
options_.discretionary_policy = false;
M_.eq_nbr = 98;
M_.ramsey_orig_eq_nbr = 0;
M_.ramsey_orig_endo_nbr = 0;
M_.set_auxiliary_variables = exist(['./+' M_.fname '/set_auxiliary_variables.m'], 'file') == 2;
M_.epilogue_names = {};
M_.epilogue_var_list_ = {};
M_.orig_maximum_endo_lag = 1;
M_.orig_maximum_endo_lead = 1;
M_.orig_maximum_exo_lag = 0;
M_.orig_maximum_exo_lead = 0;
M_.orig_maximum_exo_det_lag = 0;
M_.orig_maximum_exo_det_lead = 0;
M_.orig_maximum_lag = 1;
M_.orig_maximum_lead = 1;
M_.orig_maximum_lag_with_diffs_expanded = 1;
M_.lead_lag_incidence = [
 0 51 0;
 1 52 0;
 0 53 0;
 2 54 0;
 3 55 0;
 0 56 0;
 0 57 0;
 4 58 0;
 5 59 0;
 6 60 0;
 7 61 0;
 8 62 0;
 9 63 0;
 10 64 0;
 11 65 0;
 12 66 0;
 0 67 0;
 13 68 0;
 14 69 0;
 15 70 0;
 16 71 0;
 17 72 0;
 18 73 0;
 19 74 0;
 0 75 0;
 20 76 0;
 0 77 0;
 21 78 0;
 22 79 0;
 0 80 0;
 0 81 149;
 0 82 150;
 0 83 151;
 0 84 152;
 0 85 153;
 0 86 154;
 0 87 155;
 0 88 156;
 0 89 157;
 0 90 158;
 0 91 159;
 0 92 160;
 0 93 161;
 0 94 162;
 0 95 163;
 23 96 0;
 0 97 164;
 24 98 165;
 25 99 166;
 26 100 167;
 27 101 0;
 0 102 0;
 28 103 0;
 0 104 0;
 29 105 0;
 30 106 0;
 0 107 0;
 0 108 0;
 31 109 0;
 32 110 0;
 33 111 0;
 34 112 0;
 35 113 0;
 36 114 0;
 37 115 0;
 38 116 0;
 39 117 0;
 0 118 0;
 40 119 0;
 41 120 0;
 42 121 0;
 43 122 0;
 44 123 0;
 45 124 0;
 46 125 0;
 0 126 0;
 47 127 0;
 0 128 0;
 48 129 0;
 49 130 0;
 0 131 0;
 0 132 168;
 0 133 169;
 0 134 170;
 0 135 171;
 0 136 172;
 0 137 173;
 0 138 174;
 0 139 175;
 0 140 176;
 0 141 177;
 0 142 178;
 0 143 179;
 0 144 180;
 0 145 181;
 0 146 182;
 50 147 0;
 0 148 183;]';
M_.nstatic = 16;
M_.nfwrd   = 32;
M_.npred   = 47;
M_.nboth   = 3;
M_.nsfwrd   = 35;
M_.nspred   = 50;
M_.ndynamic   = 82;
M_.dynamic_tmp_nbr = [28; 9; 0; 0; ];
M_.equations_tags = {
  1 , 'name' , 'muc' ;
  2 , 'name' , 'mun' ;
  3 , 'name' , 'mul' ;
  4 , 'name' , 'ro' ;
  5 , 'name' , 'y' ;
  6 , 'name' , 'mc' ;
  7 , 'name' , 'w' ;
  8 , 'name' , 'k' ;
  9 , 'name' , '9' ;
  10 , 'name' , 'n' ;
  11 , 'name' , 'c' ;
  12 , 'name' , 'tau' ;
  13 , 'name' , 's' ;
  14 , 'name' , 'i' ;
  15 , 'name' , 'r' ;
  16 , 'name' , 'dd' ;
  17 , 'name' , 'pop' ;
  18 , 'name' , '18' ;
  19 , 'name' , '19' ;
  20 , 'name' , '20' ;
  21 , 'name' , '21' ;
  22 , 'name' , '22' ;
  23 , 'name' , '23' ;
  24 , 'name' , 'lambtilde' ;
  25 , 'name' , 'lami' ;
  26 , 'name' , '26' ;
  27 , 'name' , '27' ;
  28 , 'name' , '28' ;
  29 , 'name' , '29' ;
  30 , 'name' , 'rr' ;
  31 , 'name' , 'Kf' ;
  32 , 'name' , 'F' ;
  33 , 'name' , '33' ;
  34 , 'name' , '34' ;
  35 , 'name' , 'Rb' ;
  36 , 'name' , 'dF' ;
  37 , 'name' , 'dKf' ;
  38 , 'name' , 'dpie' ;
  39 , 'name' , 'dcs' ;
  40 , 'name' , 'dns' ;
  41 , 'name' , 'dci' ;
  42 , 'name' , 'dni' ;
  43 , 'name' , 'dw' ;
  44 , 'name' , 'dlams' ;
  45 , 'name' , 'dlamtau' ;
  46 , 'name' , 'dlambtilde' ;
  47 , 'name' , 'dlami' ;
  48 , 'name' , 'dlamr' ;
  49 , 'name' , 'dcr' ;
  50 , 'name' , 'dnr' ;
  51 , 'name' , 'drk' ;
  52 , 'name' , 'yF' ;
  53 , 'name' , 'mcF' ;
  54 , 'name' , 'wF' ;
  55 , 'name' , 'kF' ;
  56 , 'name' , '56' ;
  57 , 'name' , 'nF' ;
  58 , 'name' , 'cF' ;
  59 , 'name' , 'tauF' ;
  60 , 'name' , 'sF' ;
  61 , 'name' , 'iF' ;
  62 , 'name' , 'rF' ;
  63 , 'name' , 'ddF' ;
  64 , 'name' , 'popF' ;
  65 , 'name' , '65' ;
  66 , 'name' , '66' ;
  67 , 'name' , '67' ;
  68 , 'name' , '68' ;
  69 , 'name' , '69' ;
  70 , 'name' , '70' ;
  71 , 'name' , 'lambtildeF' ;
  72 , 'name' , 'lamiF' ;
  73 , 'name' , '73' ;
  74 , 'name' , '74' ;
  75 , 'name' , '75' ;
  76 , 'name' , '76' ;
  77 , 'name' , 'rrF' ;
  78 , 'name' , 'KfF' ;
  79 , 'name' , 'FF' ;
  80 , 'name' , '80' ;
  81 , 'name' , '81' ;
  82 , 'name' , 'RbF' ;
  83 , 'name' , 'dFF' ;
  84 , 'name' , 'dKfF' ;
  85 , 'name' , 'dpieF' ;
  86 , 'name' , 'dcsF' ;
  87 , 'name' , 'dnsF' ;
  88 , 'name' , 'dciF' ;
  89 , 'name' , 'dniF' ;
  90 , 'name' , 'dwF' ;
  91 , 'name' , 'dlamsF' ;
  92 , 'name' , 'dlamtauF' ;
  93 , 'name' , 'dlambtildeF' ;
  94 , 'name' , 'dlamiF' ;
  95 , 'name' , 'dlamrF' ;
  96 , 'name' , 'dcrF' ;
  97 , 'name' , 'dnrF' ;
  98 , 'name' , 'drkF' ;
};
M_.mapping.y.eqidx = [5 9 31 32 35 ];
M_.mapping.k.eqidx = [5 7 8 ];
M_.mapping.n.eqidx = [5 7 10 ];
M_.mapping.w.eqidx = [6 7 21 22 23 26 27 28 43 ];
M_.mapping.rk.eqidx = [6 24 51 ];
M_.mapping.x.eqidx = [8 9 ];
M_.mapping.c.eqidx = [9 11 ];
M_.mapping.s.eqidx = [10 11 12 13 ];
M_.mapping.i.eqidx = [10 11 12 14 15 16 17 18 21 26 ];
M_.mapping.r.eqidx = [10 11 15 ];
M_.mapping.ns.eqidx = [10 12 21 26 40 ];
M_.mapping.ni.eqidx = [10 12 21 22 26 27 42 ];
M_.mapping.nr.eqidx = [10 23 28 50 ];
M_.mapping.cs.eqidx = [11 12 18 26 39 ];
M_.mapping.ci.eqidx = [11 12 18 19 26 27 41 ];
M_.mapping.cr.eqidx = [11 20 28 49 ];
M_.mapping.tau.eqidx = [12 13 14 ];
M_.mapping.lambtilde.eqidx = [18 19 20 21 22 23 24 26 27 28 29 31 32 46 ];
M_.mapping.lamtau.eqidx = [18 21 25 26 45 ];
M_.mapping.lami.eqidx = [25 27 47 ];
M_.mapping.lams.eqidx = [25 26 44 ];
M_.mapping.lamr.eqidx = [27 28 48 ];
M_.mapping.dd.eqidx = [16 ];
M_.mapping.pop.eqidx = [17 ];
M_.mapping.Rb.eqidx = [29 30 35 82 ];
M_.mapping.pie.eqidx = [29 30 31 32 33 34 35 38 ];
M_.mapping.mc.eqidx = [6 7 31 ];
M_.mapping.F.eqidx = [32 33 36 ];
M_.mapping.Kf.eqidx = [31 33 37 ];
M_.mapping.rr.eqidx = [30 ];
M_.mapping.dcs.eqidx = [26 39 ];
M_.mapping.dns.eqidx = [26 40 ];
M_.mapping.dci.eqidx = [26 27 41 ];
M_.mapping.dni.eqidx = [26 27 42 ];
M_.mapping.dw.eqidx = [26 27 28 43 ];
M_.mapping.dlams.eqidx = [26 44 ];
M_.mapping.dlamtau.eqidx = [26 45 ];
M_.mapping.dlambtilde.eqidx = [24 26 27 28 29 46 ];
M_.mapping.dlami.eqidx = [27 47 ];
M_.mapping.dlamr.eqidx = [27 28 48 ];
M_.mapping.dcr.eqidx = [28 49 ];
M_.mapping.dnr.eqidx = [28 50 ];
M_.mapping.drk.eqidx = [24 51 ];
M_.mapping.dF.eqidx = [32 36 ];
M_.mapping.dKf.eqidx = [31 37 ];
M_.mapping.pbreve.eqidx = [5 34 ];
M_.mapping.dpie.eqidx = [29 30 31 32 38 ];
M_.mapping.muc.eqidx = [1 18 19 20 26 27 28 65 66 67 73 74 75 ];
M_.mapping.mun.eqidx = [2 21 22 23 26 27 28 68 69 70 73 74 75 ];
M_.mapping.mul.eqidx = [3 12 26 59 73 ];
M_.mapping.ro.eqidx = [1 2 3 4 ];
M_.mapping.yF.eqidx = [35 52 56 78 79 ];
M_.mapping.kF.eqidx = [52 54 55 ];
M_.mapping.nF.eqidx = [52 54 57 ];
M_.mapping.wF.eqidx = [53 54 68 69 70 73 74 75 90 ];
M_.mapping.rkF.eqidx = [53 71 98 ];
M_.mapping.xF.eqidx = [55 56 ];
M_.mapping.cF.eqidx = [56 58 ];
M_.mapping.sF.eqidx = [57 58 59 60 ];
M_.mapping.iF.eqidx = [57 58 59 61 62 63 64 65 68 73 ];
M_.mapping.rF.eqidx = [57 58 62 ];
M_.mapping.nsF.eqidx = [57 59 68 73 87 ];
M_.mapping.niF.eqidx = [57 59 68 69 73 74 89 ];
M_.mapping.nrF.eqidx = [57 70 75 97 ];
M_.mapping.csF.eqidx = [58 59 65 73 86 ];
M_.mapping.ciF.eqidx = [58 59 65 66 73 74 88 ];
M_.mapping.crF.eqidx = [58 67 75 96 ];
M_.mapping.tauF.eqidx = [59 60 61 ];
M_.mapping.lambtildeF.eqidx = [65 66 67 68 69 70 71 73 74 75 76 78 79 93 ];
M_.mapping.lamtauF.eqidx = [65 68 72 73 92 ];
M_.mapping.lamiF.eqidx = [72 74 94 ];
M_.mapping.lamsF.eqidx = [72 73 91 ];
M_.mapping.lamrF.eqidx = [74 75 95 ];
M_.mapping.ddF.eqidx = [63 ];
M_.mapping.popF.eqidx = [64 ];
M_.mapping.RbF.eqidx = [76 77 82 ];
M_.mapping.pieF.eqidx = [76 77 78 79 80 81 82 85 ];
M_.mapping.mcF.eqidx = [53 54 78 ];
M_.mapping.FF.eqidx = [79 80 83 ];
M_.mapping.KfF.eqidx = [78 80 84 ];
M_.mapping.rrF.eqidx = [77 ];
M_.mapping.dcsF.eqidx = [73 86 ];
M_.mapping.dnsF.eqidx = [73 87 ];
M_.mapping.dciF.eqidx = [73 74 88 ];
M_.mapping.dniF.eqidx = [73 74 89 ];
M_.mapping.dwF.eqidx = [73 74 75 90 ];
M_.mapping.dlamsF.eqidx = [73 91 ];
M_.mapping.dlamtauF.eqidx = [73 92 ];
M_.mapping.dlambtildeF.eqidx = [71 73 74 75 76 93 ];
M_.mapping.dlamiF.eqidx = [74 94 ];
M_.mapping.dlamrF.eqidx = [74 75 95 ];
M_.mapping.dcrF.eqidx = [75 96 ];
M_.mapping.dnrF.eqidx = [75 97 ];
M_.mapping.drkF.eqidx = [71 98 ];
M_.mapping.dFF.eqidx = [79 83 ];
M_.mapping.dKfF.eqidx = [78 84 ];
M_.mapping.pbreveF.eqidx = [52 81 ];
M_.mapping.dpieF.eqidx = [76 77 78 79 85 ];
M_.mapping.muc_innov.eqidx = [1 ];
M_.mapping.mun_innov.eqidx = [2 ];
M_.mapping.mul_innov.eqidx = [3 ];
M_.mapping.ro_innov.eqidx = [4 ];
M_.static_and_dynamic_models_differ = false;
M_.has_external_function = false;
M_.block_structure.time_recursive = false;
M_.block_structure.block(1).Simulation_Type = 1;
M_.block_structure.block(1).endo_nbr = 4;
M_.block_structure.block(1).mfs = 4;
M_.block_structure.block(1).equation = [ 4 2 3 1];
M_.block_structure.block(1).variable = [ 51 49 50 48];
M_.block_structure.block(1).is_linear = true;
M_.block_structure.block(1).NNZDerivatives = 11;
M_.block_structure.block(1).bytecode_jacob_cols_to_sparse = [1 2 3 4 5 6 7 8 ];
M_.block_structure.block(2).Simulation_Type = 8;
M_.block_structure.block(2).endo_nbr = 88;
M_.block_structure.block(2).mfs = 86;
M_.block_structure.block(2).equation = [ 53 82 5 7 9 11 12 29 35 52 56 58 59 78 6 8 10 13 14 15 18 19 20 21 22 23 24 25 26 27 28 31 32 33 34 54 55 57 60 61 62 65 66 67 68 69 70 71 72 73 74 75 76 79 80 81 98 97 96 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 95 94 93 83 84 85 86 87 88 89 90 91 92];
M_.block_structure.block(2).variable = [ 78 76 3 27 6 7 17 25 1 54 57 58 68 52 4 2 11 8 9 10 18 15 16 19 12 13 5 21 14 20 22 29 26 28 46 55 53 64 59 60 61 70 66 67 62 63 69 56 72 65 71 73 77 79 80 97 94 93 92 44 45 47 31 32 33 34 35 36 37 38 39 40 41 42 43 91 90 89 95 96 98 82 83 84 85 86 87 88];
M_.block_structure.block(2).is_linear = false;
M_.block_structure.block(2).NNZDerivatives = 376;
M_.block_structure.block(2).bytecode_jacob_cols_to_sparse = [13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 0 0 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 ];
M_.block_structure.block(3).Simulation_Type = 1;
M_.block_structure.block(3).endo_nbr = 6;
M_.block_structure.block(3).mfs = 6;
M_.block_structure.block(3).equation = [ 77 64 63 30 17 16];
M_.block_structure.block(3).variable = [ 81 75 74 30 24 23];
M_.block_structure.block(3).is_linear = true;
M_.block_structure.block(3).NNZDerivatives = 10;
M_.block_structure.block(3).bytecode_jacob_cols_to_sparse = [2 3 5 6 7 8 9 10 11 12 ];
M_.block_structure.block(1).g1_sparse_rowval = int32([]);
M_.block_structure.block(1).g1_sparse_colval = int32([]);
M_.block_structure.block(1).g1_sparse_colptr = int32([]);
M_.block_structure.block(2).g1_sparse_rowval = int32([65 1 2 14 62 4 5 15 16 4 5 15 17 18 19 22 4 15 18 68 63 71 67 64 72 73 66 61 69 70 59 60 58 33 84 8 34 35 56 10 11 36 37 10 11 36 38 39 40 43 10 36 39 86 82 57 81 83 76 55 85 80 75 74 79 77 78 54 1 2 15 2 13 30 3 14 3 4 5 16 17 6 7 1 3 7 30 31 8 34 36 9 35 9 10 11 37 38 7 8 9 12 52 2 13 22 23 24 27 28 29 65 14 5 15 22 27 62 16 17 27 18 6 19 20 21 22 23 24 25 27 28 29 30 31 68 4 5 19 20 27 28 63 4 21 29 71 19 22 26 27 67 5 15 22 23 27 28 64 15 24 29 72 13 25 73 26 27 66 4 5 19 27 61 26 28 69 28 29 70 30 32 59 6 7 30 31 32 33 60 31 32 58 1 33 12 34 43 44 45 48 49 50 84 35 36 45 50 56 37 38 48 39 40 43 47 48 86 10 11 40 41 48 49 82 10 42 50 57 11 36 43 48 81 11 36 43 44 48 49 83 12 40 41 42 43 44 45 46 48 49 50 51 52 76 12 34 46 55 47 48 85 10 11 40 48 80 47 49 75 49 50 74 12 51 52 53 54 79 52 53 77 12 53 78 8 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 46 50 50 31 30 6 30 31 27 27 27 28 27 28 27 28 29 27 27 6 25 27 28 29 28 28 29 29 29 25 49 50 49 46 48 49 50 51 52 12 12 51 52 48 48 48 49 48 49 48 49 50 48 48 ]);
M_.block_structure.block(2).g1_sparse_colval = int32([13 14 14 14 15 16 16 16 16 17 17 17 17 17 17 17 18 18 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 35 35 36 37 37 37 37 38 38 38 38 38 38 38 39 39 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 87 87 87 88 88 88 89 89 90 90 91 91 91 92 92 93 93 93 93 93 94 94 94 95 95 96 96 97 97 97 98 98 98 98 98 99 99 99 99 99 99 99 99 99 100 101 101 101 101 101 102 103 103 104 105 105 105 105 105 105 105 105 105 105 105 105 105 105 106 106 106 106 106 106 106 107 107 107 107 108 108 108 108 108 109 109 109 109 109 109 109 110 110 110 110 111 111 111 112 112 112 113 113 113 113 113 114 114 114 115 115 115 116 116 116 117 117 117 117 117 117 117 118 118 118 119 119 120 120 120 120 120 120 120 120 120 121 122 122 122 122 123 124 124 125 126 126 126 126 126 127 127 127 127 127 127 127 128 128 128 128 129 129 129 129 129 130 130 130 130 130 130 130 131 131 131 131 131 131 131 131 131 131 131 131 131 131 132 132 132 132 133 133 133 134 134 134 134 134 135 135 135 136 136 136 137 137 137 137 137 137 138 138 138 139 139 139 140 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 227 228 229 230 231 232 232 232 233 234 235 235 236 236 237 237 237 238 239 240 240 240 240 240 241 242 242 243 244 245 246 246 247 248 248 248 248 248 249 250 251 251 251 252 253 254 254 255 255 256 256 256 257 258 ]);
M_.block_structure.block(2).g1_sparse_colptr = int32([1 1 1 1 1 1 1 1 1 1 1 1 1 2 5 6 10 17 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 39 40 44 51 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 72 75 77 79 82 84 89 92 94 96 99 104 113 114 119 120 122 123 137 144 148 153 160 164 167 170 175 178 181 184 191 194 196 205 206 210 211 213 214 219 226 230 235 242 256 260 263 268 271 274 280 283 286 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 321 322 323 324 325 328 329 330 332 334 337 338 339 344 345 347 348 349 350 352 353 358 359 360 363 364 365 367 369 372 373 374 ]);
M_.block_structure.block(3).g1_sparse_rowval = int32([]);
M_.block_structure.block(3).g1_sparse_colval = int32([]);
M_.block_structure.block(3).g1_sparse_colptr = int32([]);
M_.block_structure.variable_reordered = [ 51 49 50 48 78 76 3 27 6 7 17 25 1 54 57 58 68 52 4 2 11 8 9 10 18 15 16 19 12 13 5 21 14 20 22 29 26 28 46 55 53 64 59 60 61 70 66 67 62 63 69 56 72 65 71 73 77 79 80 97 94 93 92 44 45 47 31 32 33 34 35 36 37 38 39 40 41 42 43 91 90 89 95 96 98 82 83 84 85 86 87 88 81 75 74 30 24 23];
M_.block_structure.equation_reordered = [ 4 2 3 1 53 82 5 7 9 11 12 29 35 52 56 58 59 78 6 8 10 13 14 15 18 19 20 21 22 23 24 25 26 27 28 31 32 33 34 54 55 57 60 61 62 65 66 67 68 69 70 71 72 73 74 75 76 79 80 81 98 97 96 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 95 94 93 83 84 85 86 87 88 89 90 91 92 77 64 63 30 17 16];
M_.block_structure.incidence(1).lead_lag = -1;
M_.block_structure.incidence(1).sparse_IM = [
 1 48;
 2 49;
 3 50;
 4 51;
 5 2;
 7 2;
 8 2;
 10 8;
 10 9;
 10 10;
 11 8;
 11 9;
 11 10;
 12 8;
 12 9;
 13 8;
 14 9;
 15 9;
 15 10;
 16 9;
 16 23;
 17 9;
 17 24;
 18 9;
 21 9;
 34 46;
 36 28;
 37 29;
 38 26;
 39 14;
 40 11;
 41 15;
 42 12;
 43 4;
 44 21;
 45 19;
 46 18;
 47 20;
 48 22;
 49 16;
 50 13;
 51 5;
 52 53;
 54 53;
 55 53;
 57 59;
 57 60;
 57 61;
 58 59;
 58 60;
 58 61;
 59 59;
 59 60;
 60 59;
 61 60;
 62 60;
 62 61;
 63 60;
 63 74;
 64 60;
 64 75;
 65 60;
 68 60;
 81 97;
 83 79;
 84 80;
 85 77;
 86 65;
 87 62;
 88 66;
 89 63;
 90 55;
 91 72;
 92 70;
 93 69;
 94 71;
 95 73;
 96 67;
 97 64;
 98 56;
];
M_.block_structure.incidence(2).lead_lag = 0;
M_.block_structure.incidence(2).sparse_IM = [
 1 48;
 1 51;
 2 49;
 2 51;
 3 50;
 3 51;
 4 51;
 5 1;
 5 3;
 5 46;
 6 4;
 6 5;
 6 27;
 7 3;
 7 4;
 7 27;
 8 2;
 8 6;
 9 1;
 9 6;
 9 7;
 10 3;
 10 11;
 10 12;
 10 13;
 11 7;
 11 14;
 11 15;
 11 16;
 12 11;
 12 12;
 12 14;
 12 15;
 12 17;
 12 50;
 13 8;
 13 17;
 14 9;
 14 17;
 15 10;
 16 23;
 17 24;
 18 14;
 18 15;
 18 18;
 18 19;
 18 48;
 19 15;
 19 18;
 19 48;
 20 16;
 20 18;
 20 48;
 21 4;
 21 11;
 21 12;
 21 18;
 21 19;
 21 49;
 22 4;
 22 12;
 22 18;
 22 49;
 23 4;
 23 13;
 23 18;
 23 49;
 24 5;
 24 18;
 25 19;
 25 20;
 25 21;
 26 4;
 26 9;
 26 11;
 26 12;
 26 14;
 26 15;
 26 18;
 26 19;
 26 21;
 27 4;
 27 12;
 27 15;
 27 18;
 27 20;
 27 22;
 28 4;
 28 13;
 28 16;
 28 18;
 28 22;
 29 18;
 29 25;
 29 26;
 30 25;
 30 26;
 30 30;
 31 1;
 31 18;
 31 26;
 31 27;
 31 29;
 32 1;
 32 18;
 32 26;
 32 28;
 33 26;
 33 28;
 33 29;
 34 26;
 34 46;
 35 1;
 35 25;
 35 26;
 35 52;
 36 28;
 36 44;
 37 29;
 37 45;
 38 26;
 38 47;
 39 14;
 39 31;
 40 11;
 40 32;
 41 15;
 41 33;
 42 12;
 42 34;
 43 4;
 43 35;
 44 21;
 44 36;
 45 19;
 45 37;
 46 18;
 46 38;
 47 20;
 47 39;
 48 22;
 48 40;
 49 16;
 49 41;
 50 13;
 50 42;
 51 5;
 51 43;
 52 52;
 52 54;
 52 97;
 53 55;
 53 56;
 53 78;
 54 54;
 54 55;
 54 78;
 55 53;
 55 57;
 56 52;
 56 57;
 56 58;
 57 54;
 57 62;
 57 63;
 57 64;
 58 58;
 58 65;
 58 66;
 58 67;
 59 50;
 59 62;
 59 63;
 59 65;
 59 66;
 59 68;
 60 59;
 60 68;
 61 60;
 61 68;
 62 61;
 63 74;
 64 75;
 65 48;
 65 65;
 65 66;
 65 69;
 65 70;
 66 48;
 66 66;
 66 69;
 67 48;
 67 67;
 67 69;
 68 49;
 68 55;
 68 62;
 68 63;
 68 69;
 68 70;
 69 49;
 69 55;
 69 63;
 69 69;
 70 49;
 70 55;
 70 64;
 70 69;
 71 56;
 71 69;
 72 70;
 72 71;
 72 72;
 73 55;
 73 60;
 73 62;
 73 63;
 73 65;
 73 66;
 73 69;
 73 70;
 73 72;
 74 55;
 74 63;
 74 66;
 74 69;
 74 71;
 74 73;
 75 55;
 75 64;
 75 67;
 75 69;
 75 73;
 76 69;
 76 76;
 76 77;
 77 76;
 77 77;
 77 81;
 78 52;
 78 69;
 78 77;
 78 78;
 78 80;
 79 52;
 79 69;
 79 77;
 79 79;
 80 77;
 80 79;
 80 80;
 81 77;
 81 97;
 82 76;
 82 77;
 83 79;
 83 95;
 84 80;
 84 96;
 85 77;
 85 98;
 86 65;
 86 82;
 87 62;
 87 83;
 88 66;
 88 84;
 89 63;
 89 85;
 90 55;
 90 86;
 91 72;
 91 87;
 92 70;
 92 88;
 93 69;
 93 89;
 94 71;
 94 90;
 95 73;
 95 91;
 96 67;
 96 92;
 97 64;
 97 93;
 98 56;
 98 94;
];
M_.block_structure.incidence(3).lead_lag = 1;
M_.block_structure.incidence(3).sparse_IM = [
 24 38;
 24 43;
 26 31;
 26 32;
 26 33;
 26 34;
 26 35;
 26 36;
 26 37;
 26 38;
 26 48;
 26 49;
 26 50;
 27 33;
 27 34;
 27 35;
 27 38;
 27 39;
 27 40;
 27 48;
 27 49;
 28 35;
 28 38;
 28 40;
 28 41;
 28 42;
 28 48;
 28 49;
 29 38;
 29 47;
 30 47;
 31 45;
 31 47;
 32 44;
 32 47;
 71 89;
 71 94;
 73 48;
 73 49;
 73 50;
 73 82;
 73 83;
 73 84;
 73 85;
 73 86;
 73 87;
 73 88;
 73 89;
 74 48;
 74 49;
 74 84;
 74 85;
 74 86;
 74 89;
 74 90;
 74 91;
 75 48;
 75 49;
 75 86;
 75 89;
 75 91;
 75 92;
 75 93;
 76 89;
 76 98;
 77 98;
 78 96;
 78 98;
 79 95;
 79 98;
];
M_.block_structure.dyn_tmp_nbr = 34;
M_.state_var = [51 49 50 48 4 2 11 8 9 10 18 15 16 19 12 13 5 21 14 20 22 29 26 28 46 55 53 64 59 60 61 70 66 67 62 63 69 56 72 65 71 73 77 79 80 97 75 74 24 23 ];
M_.maximum_lag = 1;
M_.maximum_lead = 1;
M_.maximum_endo_lag = 1;
M_.maximum_endo_lead = 1;
oo_.steady_state = zeros(98, 1);
M_.maximum_exo_lag = 0;
M_.maximum_exo_lead = 0;
oo_.exo_steady_state = zeros(4, 1);
M_.params = NaN(21, 1);
M_.endo_trends = struct('deflator', cell(98, 1), 'log_deflator', cell(98, 1), 'growth_factor', cell(98, 1), 'log_growth_factor', cell(98, 1));
M_.NNZDerivatives = [441; -1; -1; ];
M_.dynamic_g1_sparse_rowval = int32([5 7 8 43 51 10 11 12 13 10 11 12 14 15 16 17 18 21 10 11 15 40 42 50 39 41 49 46 45 47 44 48 16 17 38 36 37 34 1 2 3 4 52 54 55 90 98 57 58 59 60 57 58 59 61 62 63 64 65 68 57 58 62 87 89 97 86 88 96 93 92 94 91 95 63 64 85 83 84 81 5 9 31 32 35 8 5 7 10 6 7 21 22 23 26 27 28 43 6 24 51 8 9 9 11 13 14 26 15 10 12 21 26 40 10 12 21 22 26 27 42 10 23 28 50 11 12 18 26 39 11 12 18 19 26 27 41 11 20 28 49 12 13 14 18 19 20 21 22 23 24 26 27 28 29 31 32 46 18 21 25 26 45 25 27 47 25 26 44 27 28 48 16 17 29 30 35 29 30 31 32 33 34 35 38 6 7 31 32 33 36 31 33 37 30 39 40 41 42 43 44 45 46 47 48 49 50 51 36 37 5 34 38 1 18 19 20 65 66 67 2 21 22 23 68 69 70 3 12 59 1 2 3 4 35 52 56 78 79 55 52 54 57 53 54 68 69 70 73 74 75 90 53 71 98 55 56 56 58 60 61 73 62 57 59 68 73 87 57 59 68 69 73 74 89 57 70 75 97 58 59 65 73 86 58 59 65 66 73 74 88 58 67 75 96 59 60 61 65 66 67 68 69 70 71 73 74 75 76 78 79 93 65 68 72 73 92 72 74 94 72 73 91 74 75 95 63 64 76 77 82 76 77 78 79 80 81 82 85 53 54 78 79 80 83 78 80 84 77 86 87 88 89 90 91 92 93 94 95 96 97 98 83 84 52 81 85 26 26 26 27 26 27 26 27 28 26 26 24 26 27 28 29 27 27 28 28 28 24 32 31 29 30 31 32 26 27 28 73 74 75 26 27 28 73 74 75 26 73 73 73 73 74 73 74 73 74 75 73 73 71 73 74 75 76 74 74 75 75 75 71 79 78 76 77 78 79 1 2 3 4 ]);
M_.dynamic_g1_sparse_colval = int32([2 2 2 4 5 8 8 8 8 9 9 9 9 9 9 9 9 9 10 10 10 11 12 13 14 15 16 18 19 20 21 22 23 24 26 28 29 46 48 49 50 51 53 53 53 55 56 59 59 59 59 60 60 60 60 60 60 60 60 60 61 61 61 62 63 64 65 66 67 69 70 71 72 73 74 75 77 79 80 97 99 99 99 99 99 100 101 101 101 102 102 102 102 102 102 102 102 102 103 103 103 104 104 105 105 106 107 107 108 109 109 109 109 109 110 110 110 110 110 110 110 111 111 111 111 112 112 112 112 112 113 113 113 113 113 113 113 114 114 114 114 115 115 115 116 116 116 116 116 116 116 116 116 116 116 116 116 116 117 117 117 117 117 118 118 118 119 119 119 120 120 120 121 122 123 123 123 124 124 124 124 124 124 124 124 125 125 125 126 126 126 127 127 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 144 145 146 146 146 146 146 146 146 147 147 147 147 147 147 147 148 148 148 149 149 149 149 150 150 150 150 150 151 152 152 152 153 153 153 153 153 153 153 153 153 154 154 154 155 155 156 156 157 158 158 159 160 160 160 160 160 161 161 161 161 161 161 161 162 162 162 162 163 163 163 163 163 164 164 164 164 164 164 164 165 165 165 165 166 166 166 167 167 167 167 167 167 167 167 167 167 167 167 167 167 168 168 168 168 168 169 169 169 170 170 170 171 171 171 172 173 174 174 174 175 175 175 175 175 175 175 175 176 176 176 177 177 177 178 178 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 195 196 227 228 229 229 230 230 231 231 231 232 233 234 234 234 234 234 235 236 236 237 238 239 240 241 243 243 243 243 244 244 244 244 244 244 245 245 245 245 245 245 246 246 278 279 280 280 281 281 282 282 282 283 284 285 285 285 285 285 286 287 287 288 289 290 291 292 294 294 294 294 295 296 297 298 ]);
M_.dynamic_g1_sparse_colptr = int32([1 1 4 4 5 6 6 6 10 19 22 23 24 25 26 27 28 28 29 30 31 32 33 34 35 35 36 36 37 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 39 39 40 41 42 43 43 46 46 47 48 48 48 52 61 64 65 66 67 68 69 70 70 71 72 73 74 75 76 77 77 78 78 79 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 81 81 86 87 90 99 102 104 106 107 109 110 115 122 126 131 138 142 145 159 164 167 170 173 174 175 178 186 189 192 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 213 214 221 228 231 235 240 241 244 253 256 258 260 261 263 264 269 276 280 285 292 296 299 313 318 321 324 327 328 329 332 340 343 346 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 367 368 368 368 368 368 368 368 368 368 368 368 368 368 368 368 368 368 368 368 368 368 368 368 368 368 368 368 368 368 368 368 369 370 372 374 377 378 379 384 385 387 388 389 390 391 392 392 396 402 408 410 410 410 410 410 410 410 410 410 410 410 410 410 410 410 410 410 410 410 410 410 410 410 410 410 410 410 410 410 410 410 410 411 412 414 416 419 420 421 426 427 429 430 431 432 433 434 434 438 439 440 441 442 ]);
M_.lhs = {
'muc'; 
'mun'; 
'mul'; 
'ro'; 
'y'; 
'mc'; 
'w'; 
'k'; 
'y'; 
'n'; 
'c'; 
'tau'; 
's'; 
'i'; 
'r'; 
'dd'; 
'pop'; 
'1/cs'; 
'1/ci'; 
'1/cr'; 
'ns*theta'; 
'ni*theta'; 
'nr*theta'; 
'lambtilde'; 
'lami'; 
'log(cs*dcs(1))-theta/2*(ns*dns(1))^2+lamtau*dlamtau(1)*(ci*i*dcs(1)*cs*pi1*dci(1)+ni*i*dns(1)*ns*pi2*dni(1)+pi3*i*(1-mul(1)))+lambtilde*dlambtilde(1)*(dns(1)*ns*w*dw(1)*(1-mun(1))-cs*dcs(1)*(1+muc(1)))-lams/betta+lams*dlams(1)'; 
'log(ci*dci(1))-theta/2*(ni*dni(1))^2+lambtilde*dlambtilde(1)*((1-mun(1))*dni(1)*ni*w*dw(1)-(1+muc(1))*ci*dci(1))-lami/betta+lami*dlami(1)*(1-pir-pid)+pir*lamr*dlamr(1)'; 
'lamr*dlamr(1)+log(cr*dcr(1))-theta/2*(nr*dnr(1))^2+lambtilde*dlambtilde(1)*((1-mun(1))*dnr(1)*nr*w*dw(1)-(1+muc(1))*cr*dcr(1))-lamr/betta'; 
'lambtilde'; 
'rr'; 
'Kf'; 
'F'; 
'Kf'; 
'pbreve^(-1)'; 
'Rb'; 
'dF'; 
'dKf'; 
'dpie'; 
'dcs'; 
'dns'; 
'dci'; 
'dni'; 
'dw'; 
'dlams'; 
'dlamtau'; 
'dlambtilde'; 
'dlami'; 
'dlamr'; 
'dcr'; 
'dnr'; 
'drk'; 
'yF'; 
'mcF'; 
'wF'; 
'kF'; 
'yF'; 
'nF'; 
'cF'; 
'tauF'; 
'sF'; 
'iF'; 
'rF'; 
'ddF'; 
'popF'; 
'1/csF'; 
'1/ciF'; 
'1/crF'; 
'theta*nsF'; 
'theta*niF'; 
'theta*nrF'; 
'lambtildeF'; 
'lamiF'; 
'log(csF*dcsF(1))-theta/2*(nsF*dnsF(1))^2+lamtauF*dlamtauF(1)*(ciF*iF*dcsF(1)*pi1*csF*dciF(1)+niF*iF*dnsF(1)*pi2*nsF*dniF(1)+(1-mul(1))*pi3*iF)+lambtildeF*dlambtildeF(1)*((1-mun(1))*dnsF(1)*nsF*wF*dwF(1)-(1+muc(1))*csF*dcsF(1))-lamsF/betta+lamsF*dlamsF(1)'; 
'log(ciF*dciF(1))-theta/2*(niF*dniF(1))^2+lambtildeF*dlambtildeF(1)*((1-mun(1))*dniF(1)*niF*wF*dwF(1)-(1+muc(1))*ciF*dciF(1))-lamiF/betta+(1-pir-pid)*lamiF*dlamiF(1)+pir*lamrF*dlamrF(1)'; 
'lamrF*dlamrF(1)+log(crF*dcrF(1))-theta/2*(nrF*dnrF(1))^2+lambtildeF*dlambtildeF(1)*((1-mun(1))*dnrF(1)*nrF*wF*dwF(1)-(1+muc(1))*crF*dcrF(1))-lamrF/betta'; 
'lambtildeF'; 
'rrF'; 
'KfF'; 
'FF'; 
'KfF'; 
'pbreveF^(-1)'; 
'RbF'; 
'dFF'; 
'dKfF'; 
'dpieF'; 
'dcsF'; 
'dnsF'; 
'dciF'; 
'dniF'; 
'dwF'; 
'dlamsF'; 
'dlamtauF'; 
'dlambtildeF'; 
'dlamiF'; 
'dlamrF'; 
'dcrF'; 
'dnrF'; 
'drkF'; 
};
M_.static_tmp_nbr = [28; 9; 0; 0; ];
M_.block_structure_stat.block(1).Simulation_Type = 3;
M_.block_structure_stat.block(1).endo_nbr = 1;
M_.block_structure_stat.block(1).mfs = 1;
M_.block_structure_stat.block(1).equation = [ 4];
M_.block_structure_stat.block(1).variable = [ 51];
M_.block_structure_stat.block(2).Simulation_Type = 1;
M_.block_structure_stat.block(2).endo_nbr = 32;
M_.block_structure_stat.block(2).mfs = 32;
M_.block_structure_stat.block(2).equation = [ 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98];
M_.block_structure_stat.block(2).variable = [ 44 45 47 31 32 33 34 35 36 37 38 39 40 41 42 43 95 96 98 82 83 84 85 86 87 88 89 90 91 92 93 94];
M_.block_structure_stat.block(3).Simulation_Type = 3;
M_.block_structure_stat.block(3).endo_nbr = 1;
M_.block_structure_stat.block(3).mfs = 1;
M_.block_structure_stat.block(3).equation = [ 2];
M_.block_structure_stat.block(3).variable = [ 49];
M_.block_structure_stat.block(4).Simulation_Type = 3;
M_.block_structure_stat.block(4).endo_nbr = 1;
M_.block_structure_stat.block(4).mfs = 1;
M_.block_structure_stat.block(4).equation = [ 3];
M_.block_structure_stat.block(4).variable = [ 50];
M_.block_structure_stat.block(5).Simulation_Type = 3;
M_.block_structure_stat.block(5).endo_nbr = 1;
M_.block_structure_stat.block(5).mfs = 1;
M_.block_structure_stat.block(5).equation = [ 1];
M_.block_structure_stat.block(5).variable = [ 48];
M_.block_structure_stat.block(6).Simulation_Type = 6;
M_.block_structure_stat.block(6).endo_nbr = 56;
M_.block_structure_stat.block(6).mfs = 56;
M_.block_structure_stat.block(6).equation = [ 35 34 5 6 7 8 9 10 11 12 13 14 15 33 32 52 53 54 55 56 57 58 59 60 61 62 31 28 65 66 67 68 69 70 71 72 73 74 75 76 29 78 79 80 81 82 18 19 20 21 22 23 24 25 26 27];
M_.block_structure_stat.block(6).variable = [ 52 46 3 27 2 6 7 13 14 17 8 9 10 28 1 54 78 53 57 58 64 65 68 59 60 61 29 22 70 66 67 62 63 69 56 71 72 55 73 76 26 80 77 79 97 25 19 15 16 11 12 18 5 20 21 4];
M_.block_structure_stat.block(7).Simulation_Type = 1;
M_.block_structure_stat.block(7).endo_nbr = 2;
M_.block_structure_stat.block(7).mfs = 2;
M_.block_structure_stat.block(7).equation = [ 30 77];
M_.block_structure_stat.block(7).variable = [ 30 81];
M_.block_structure_stat.block(8).Simulation_Type = 3;
M_.block_structure_stat.block(8).endo_nbr = 1;
M_.block_structure_stat.block(8).mfs = 1;
M_.block_structure_stat.block(8).equation = [ 64];
M_.block_structure_stat.block(8).variable = [ 75];
M_.block_structure_stat.block(9).Simulation_Type = 3;
M_.block_structure_stat.block(9).endo_nbr = 1;
M_.block_structure_stat.block(9).mfs = 1;
M_.block_structure_stat.block(9).equation = [ 63];
M_.block_structure_stat.block(9).variable = [ 74];
M_.block_structure_stat.block(10).Simulation_Type = 3;
M_.block_structure_stat.block(10).endo_nbr = 1;
M_.block_structure_stat.block(10).mfs = 1;
M_.block_structure_stat.block(10).equation = [ 17];
M_.block_structure_stat.block(10).variable = [ 24];
M_.block_structure_stat.block(11).Simulation_Type = 3;
M_.block_structure_stat.block(11).endo_nbr = 1;
M_.block_structure_stat.block(11).mfs = 1;
M_.block_structure_stat.block(11).equation = [ 16];
M_.block_structure_stat.block(11).variable = [ 23];
M_.block_structure_stat.variable_reordered = [ 51 44 45 47 31 32 33 34 35 36 37 38 39 40 41 42 43 95 96 98 82 83 84 85 86 87 88 89 90 91 92 93 94 49 50 48 52 46 3 27 2 6 7 13 14 17 8 9 10 28 1 54 78 53 57 58 64 65 68 59 60 61 29 22 70 66 67 62 63 69 56 71 72 55 73 76 26 80 77 79 97 25 19 15 16 11 12 18 5 20 21 4 30 81 75 74 24 23];
M_.block_structure_stat.equation_reordered = [ 4 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 2 3 1 35 34 5 6 7 8 9 10 11 12 13 14 15 33 32 52 53 54 55 56 57 58 59 60 61 62 31 28 65 66 67 68 69 70 71 72 73 74 75 76 29 78 79 80 81 82 18 19 20 21 22 23 24 25 26 27 30 77 64 63 17 16];
M_.block_structure_stat.incidence.sparse_IM = [
 1 48;
 1 51;
 2 49;
 2 51;
 3 50;
 3 51;
 5 1;
 5 2;
 5 3;
 5 46;
 6 4;
 6 5;
 6 27;
 7 2;
 7 3;
 7 4;
 7 27;
 8 2;
 8 6;
 9 1;
 9 6;
 9 7;
 10 3;
 10 8;
 10 9;
 10 10;
 10 11;
 10 12;
 10 13;
 11 7;
 11 8;
 11 9;
 11 10;
 11 14;
 11 15;
 11 16;
 12 8;
 12 9;
 12 11;
 12 12;
 12 14;
 12 15;
 12 17;
 12 50;
 13 17;
 14 9;
 14 17;
 15 9;
 16 9;
 17 9;
 18 9;
 18 14;
 18 15;
 18 18;
 18 19;
 18 48;
 19 15;
 19 18;
 19 48;
 20 16;
 20 18;
 20 48;
 21 4;
 21 9;
 21 11;
 21 12;
 21 18;
 21 19;
 21 49;
 22 4;
 22 12;
 22 18;
 22 49;
 23 4;
 23 13;
 23 18;
 23 49;
 24 5;
 24 18;
 24 38;
 24 43;
 25 19;
 25 20;
 25 21;
 26 4;
 26 9;
 26 11;
 26 12;
 26 14;
 26 15;
 26 18;
 26 19;
 26 21;
 26 31;
 26 32;
 26 33;
 26 34;
 26 35;
 26 36;
 26 37;
 26 38;
 26 48;
 26 49;
 26 50;
 27 4;
 27 12;
 27 15;
 27 18;
 27 20;
 27 22;
 27 33;
 27 34;
 27 35;
 27 38;
 27 39;
 27 40;
 27 48;
 27 49;
 28 4;
 28 13;
 28 16;
 28 18;
 28 22;
 28 35;
 28 38;
 28 40;
 28 41;
 28 42;
 28 48;
 28 49;
 29 18;
 29 25;
 29 26;
 29 38;
 29 47;
 30 25;
 30 26;
 30 30;
 30 47;
 31 1;
 31 18;
 31 26;
 31 27;
 31 29;
 31 45;
 31 47;
 32 1;
 32 18;
 32 26;
 32 28;
 32 44;
 32 47;
 33 26;
 33 28;
 33 29;
 34 26;
 34 46;
 35 1;
 35 26;
 35 52;
 36 44;
 37 45;
 38 47;
 39 31;
 40 32;
 41 33;
 42 34;
 43 35;
 44 36;
 45 37;
 46 38;
 47 39;
 48 40;
 49 41;
 50 42;
 51 43;
 52 52;
 52 53;
 52 54;
 52 97;
 53 55;
 53 56;
 53 78;
 54 53;
 54 54;
 54 55;
 54 78;
 55 53;
 55 57;
 56 52;
 56 57;
 56 58;
 57 54;
 57 59;
 57 60;
 57 61;
 57 62;
 57 63;
 57 64;
 58 58;
 58 59;
 58 60;
 58 61;
 58 65;
 58 66;
 58 67;
 59 50;
 59 59;
 59 60;
 59 62;
 59 63;
 59 65;
 59 66;
 59 68;
 60 68;
 61 60;
 61 68;
 62 60;
 63 60;
 64 60;
 65 48;
 65 60;
 65 65;
 65 66;
 65 69;
 65 70;
 66 48;
 66 66;
 66 69;
 67 48;
 67 67;
 67 69;
 68 49;
 68 55;
 68 60;
 68 62;
 68 63;
 68 69;
 68 70;
 69 49;
 69 55;
 69 63;
 69 69;
 70 49;
 70 55;
 70 64;
 70 69;
 71 56;
 71 69;
 71 89;
 71 94;
 72 70;
 72 71;
 72 72;
 73 48;
 73 49;
 73 50;
 73 55;
 73 60;
 73 62;
 73 63;
 73 65;
 73 66;
 73 69;
 73 70;
 73 72;
 73 82;
 73 83;
 73 84;
 73 85;
 73 86;
 73 87;
 73 88;
 73 89;
 74 48;
 74 49;
 74 55;
 74 63;
 74 66;
 74 69;
 74 71;
 74 73;
 74 84;
 74 85;
 74 86;
 74 89;
 74 90;
 74 91;
 75 48;
 75 49;
 75 55;
 75 64;
 75 67;
 75 69;
 75 73;
 75 86;
 75 89;
 75 91;
 75 92;
 75 93;
 76 69;
 76 76;
 76 77;
 76 89;
 76 98;
 77 76;
 77 77;
 77 81;
 77 98;
 78 52;
 78 69;
 78 77;
 78 78;
 78 80;
 78 96;
 78 98;
 79 52;
 79 69;
 79 77;
 79 79;
 79 95;
 79 98;
 80 77;
 80 79;
 80 80;
 81 77;
 81 97;
 82 25;
 82 76;
 82 77;
 83 95;
 84 96;
 85 98;
 86 82;
 87 83;
 88 84;
 89 85;
 90 86;
 91 87;
 92 88;
 93 89;
 94 90;
 95 91;
 96 92;
 97 93;
 98 94;
];
M_.block_structure_stat.tmp_nbr = 26;
M_.block_structure_stat.block(1).g1_sparse_rowval = int32([]);
M_.block_structure_stat.block(1).g1_sparse_colval = int32([]);
M_.block_structure_stat.block(1).g1_sparse_colptr = int32([1 1 ]);
M_.block_structure_stat.block(2).g1_sparse_rowval = int32([]);
M_.block_structure_stat.block(2).g1_sparse_colval = int32([]);
M_.block_structure_stat.block(2).g1_sparse_colptr = int32([]);
M_.block_structure_stat.block(3).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(3).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(3).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(4).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(4).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(4).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(5).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(5).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(5).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(6).g1_sparse_rowval = int32([1 16 20 42 43 2 3 3 5 8 4 5 27 3 5 6 6 7 7 9 8 28 52 9 10 47 55 10 11 12 8 9 10 8 9 10 12 13 47 50 55 8 9 14 15 1 3 7 15 27 16 18 21 17 18 42 16 18 19 19 20 20 22 21 34 39 22 23 29 37 23 24 25 21 22 23 21 22 23 25 26 29 32 37 21 22 14 27 28 56 29 32 36 37 22 23 29 30 37 38 22 31 39 21 23 32 37 21 23 32 33 37 38 29 30 31 32 33 34 35 37 38 39 40 42 43 17 35 36 38 36 37 17 18 32 33 34 37 38 39 38 39 40 46 1 2 14 15 27 41 42 44 40 42 43 44 45 46 43 44 16 45 41 46 47 50 54 55 9 10 47 48 55 56 9 28 49 8 10 50 55 8 10 50 51 55 56 15 27 28 41 47 48 49 50 51 52 53 55 56 4 53 54 56 54 55 4 5 28 50 51 52 55 56 ]);
M_.block_structure_stat.block(6).g1_sparse_colval = int32([1 1 1 1 1 2 2 3 3 3 4 4 4 5 5 5 6 6 7 7 8 8 8 9 9 9 9 10 10 10 11 11 11 12 12 12 12 12 12 12 12 13 13 14 14 15 15 15 15 15 16 16 16 17 17 17 18 18 18 19 19 20 20 21 21 21 22 22 22 22 23 23 23 24 24 24 25 25 25 25 25 25 25 25 26 26 27 27 28 28 29 29 29 29 30 30 30 30 30 30 31 31 31 32 32 32 32 33 33 33 33 33 33 34 34 34 34 34 34 34 34 34 34 34 34 34 35 35 36 36 37 37 38 38 38 38 38 38 38 38 39 39 40 40 41 41 41 41 41 41 42 42 43 43 43 43 43 43 44 44 45 45 46 46 47 47 47 47 48 48 48 48 48 48 49 49 49 50 50 50 50 51 51 51 51 51 51 52 52 52 52 52 52 52 52 52 52 52 52 52 53 53 54 54 55 55 56 56 56 56 56 56 56 56 ]);
M_.block_structure_stat.block(6).g1_sparse_colptr = int32([1 6 8 11 14 17 19 21 24 28 31 34 42 44 46 51 54 57 60 62 64 67 71 74 77 85 87 89 91 95 101 104 108 114 127 129 131 133 141 143 145 151 153 159 161 163 165 169 175 178 182 188 201 203 205 207 215 ]);
M_.block_structure_stat.block(7).g1_sparse_rowval = int32([]);
M_.block_structure_stat.block(7).g1_sparse_colval = int32([]);
M_.block_structure_stat.block(7).g1_sparse_colptr = int32([]);
M_.block_structure_stat.block(8).g1_sparse_rowval = int32([]);
M_.block_structure_stat.block(8).g1_sparse_colval = int32([]);
M_.block_structure_stat.block(8).g1_sparse_colptr = int32([1 1 ]);
M_.block_structure_stat.block(9).g1_sparse_rowval = int32([]);
M_.block_structure_stat.block(9).g1_sparse_colval = int32([]);
M_.block_structure_stat.block(9).g1_sparse_colptr = int32([1 1 ]);
M_.block_structure_stat.block(10).g1_sparse_rowval = int32([]);
M_.block_structure_stat.block(10).g1_sparse_colval = int32([]);
M_.block_structure_stat.block(10).g1_sparse_colptr = int32([1 1 ]);
M_.block_structure_stat.block(11).g1_sparse_rowval = int32([]);
M_.block_structure_stat.block(11).g1_sparse_colval = int32([]);
M_.block_structure_stat.block(11).g1_sparse_colptr = int32([1 1 ]);
M_.static_g1_sparse_rowval = int32([5 9 31 32 35 5 7 8 5 7 10 6 7 21 22 23 26 27 28 6 24 8 9 9 11 10 11 12 10 11 12 14 15 16 17 18 21 26 10 11 10 12 21 26 10 12 21 22 26 27 10 23 28 11 12 18 26 11 12 18 19 26 27 11 20 28 12 13 14 18 19 20 21 22 23 24 26 27 28 29 31 32 18 21 25 26 25 27 25 26 27 28 29 30 82 29 30 31 32 33 34 35 6 7 31 32 33 31 33 30 26 39 26 40 26 27 41 26 27 42 26 27 28 43 26 44 26 45 24 26 27 28 29 46 27 47 27 28 48 28 49 28 50 24 51 32 36 31 37 5 34 29 30 31 32 38 1 18 19 20 26 27 28 65 66 67 73 74 75 2 21 22 23 26 27 28 68 69 70 73 74 75 3 12 26 59 73 1 2 3 35 52 56 78 79 52 54 55 52 54 57 53 54 68 69 70 73 74 75 53 71 55 56 56 58 57 58 59 57 58 59 61 62 63 64 65 68 73 57 58 57 59 68 73 57 59 68 69 73 74 57 70 75 58 59 65 73 58 59 65 66 73 74 58 67 75 59 60 61 65 66 67 68 69 70 71 73 74 75 76 78 79 65 68 72 73 72 74 72 73 74 75 76 77 82 76 77 78 79 80 81 82 53 54 78 79 80 78 80 77 73 86 73 87 73 74 88 73 74 89 73 74 75 90 73 91 73 92 71 73 74 75 76 93 74 94 74 75 95 75 96 75 97 71 98 79 83 78 84 52 81 76 77 78 79 85 ]);
M_.static_g1_sparse_colval = int32([1 1 1 1 1 2 2 2 3 3 3 4 4 4 4 4 4 4 4 5 5 6 6 7 7 8 8 8 9 9 9 9 9 9 9 9 9 9 10 10 11 11 11 11 12 12 12 12 12 12 13 13 13 14 14 14 14 15 15 15 15 15 15 16 16 16 17 17 17 18 18 18 18 18 18 18 18 18 18 18 18 18 19 19 19 19 20 20 21 21 22 22 25 25 25 26 26 26 26 26 26 26 27 27 27 28 28 29 29 30 31 31 32 32 33 33 33 34 34 34 35 35 35 35 36 36 37 37 38 38 38 38 38 38 39 39 40 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 47 47 47 48 48 48 48 48 48 48 48 48 48 48 48 48 49 49 49 49 49 49 49 49 49 49 49 49 49 50 50 50 50 50 51 51 51 52 52 52 52 52 53 53 53 54 54 54 55 55 55 55 55 55 55 55 56 56 57 57 58 58 59 59 59 60 60 60 60 60 60 60 60 60 60 61 61 62 62 62 62 63 63 63 63 63 63 64 64 64 65 65 65 65 66 66 66 66 66 66 67 67 67 68 68 68 69 69 69 69 69 69 69 69 69 69 69 69 69 70 70 70 70 71 71 72 72 73 73 76 76 76 77 77 77 77 77 77 77 78 78 78 79 79 80 80 81 82 82 83 83 84 84 84 85 85 85 86 86 86 86 87 87 88 88 89 89 89 89 89 89 90 90 91 91 91 92 92 93 93 94 94 95 95 96 96 97 97 98 98 98 98 98 ]);
M_.static_g1_sparse_colptr = int32([1 6 9 12 20 22 24 26 29 39 41 45 51 54 58 64 67 70 83 87 89 91 93 93 93 96 103 106 108 110 111 113 115 118 121 125 127 129 135 137 140 142 144 146 148 150 152 157 170 183 188 191 196 199 202 210 212 214 216 219 229 231 235 241 244 248 254 257 260 273 277 279 281 283 283 283 286 293 296 298 300 301 303 305 308 311 315 317 319 325 327 330 332 334 336 338 340 342 347 ]);
M_.params(10) = 0.9994005428715773;
betta = M_.params(10);
M_.params(9) = 0.001527777777777778;
pid = M_.params(9);
M_.params(8) = 0.5-M_.params(9);
pir = M_.params(8);
M_.params(17) = 0.001923076923076923;
delta = M_.params(17);
M_.params(14) = 0.6666666666666666;
alfa = M_.params(14);
M_.params(4) = 1.33;
gam = M_.params(4);
M_.params(1) = 0.9808;
xi = M_.params(1);
M_.params(20) = 0;
xi_flex = M_.params(20);
M_.params(2) = 1.5;
rpi = M_.params(2);
M_.params(3) = 0.009615384615384616;
rx = M_.params(3);
M_.params(16) = 22.46;
n_target = M_.params(16);
M_.params(15) = 1162;
inc_target = M_.params(15);
M_.params(19) = 0.205;
eta = M_.params(19);
M_.params(11) = 0.0003;
i_ini = M_.params(11);
M_.params(21) = 0.92;
ro_ini = M_.params(21);
M_.params(21) = 0.9123;
ro_ini = M_.params(21);
format long;
pi1_shr_target = 0.18;  
pi2_shr_target = 0.18;  
pi3_shr_target = (1 - pi1_shr_target - pi2_shr_target);   
RplusD_target  = 0.15;               
y_ss= inc_target;
n_ss= n_target;
mc_ss= 1/gam;
w_ss=mc_ss*alfa*y_ss/n_ss;
rk_ss=1/betta-1+delta;
kn_ss=(1-alfa)*w_ss/alfa/rk_ss;       
yk_ss=(y_ss/n_ss)/kn_ss;              
M_.params(12) = (y_ss/n_ss)^M_.params(14)*yk_ss^(1-M_.params(14));
A = M_.params(12);
k_ss=(y_ss/A/n_ss^alfa)^(1/(1-alfa));
x_ss=delta*k_ss;
M_.params(18) = y_ss*M_.params(19);
g_ss = M_.params(18);
c_ss=(1-eta)*y_ss-x_ss;
M_.params(18) = y_ss-c_ss-x_ss;
g_ss = M_.params(18);
ns_ss=n_ss;
cs_ss=c_ss;
tau_ss=0;
s_ss=1;
i_ss=0;
r_ss=0;
lambtilde_ss=1/cs_ss;
ci_ss=cs_ss;
cr_ss=cs_ss;
M_.params(13) = lambtilde_ss*w_ss/ns_ss;
theta = M_.params(13);
ni_ss=lambtilde_ss*w_ss/theta;
nr_ss=ns_ss;
lams_ss=(log(cs_ss)-theta/2*ns_ss^2 + lambtilde_ss*(w_ss*ns_ss-cs_ss) ) / ( 1/betta-1 );
lamr_ss=(log(cr_ss)-theta/2*nr_ss^2 + lambtilde_ss*(w_ss*nr_ss-cr_ss) ) / ( 1/betta-1 );
lami_ss=(log(ci_ss)-theta/2*ni_ss^2 + lambtilde_ss*(w_ss*ni_ss-ci_ss) + pir*lamr_ss) / ( 1/betta-1+pir+pid );
lamtau_ss=lami_ss-lams_ss;
rr_ss=1/betta;
dcs_ss=1;
dns_ss=1;
dci_ss=1;
dni_ss=1;
dw_ss=1;
dlams_ss=1;
dlamtau_ss=1; 
dlambtilde_ss=1;
dlami_ss=1;
dlamr_ss=1;
dcr_ss=1;
dnr_ss=1;
drk_ss=1;
Kf_ss=1/(1-betta*xi)*gam*mc_ss*lambtilde_ss*y_ss;
F_ss=1/(1-betta*xi)*lambtilde_ss*y_ss;
pie_ss=1;
Rb_ss=rr_ss;
KfF_ss=1/(1-betta*xi_flex)*gam*mc_ss*lambtilde_ss*y_ss;
FF_ss=1/(1-betta*xi_flex)*lambtilde_ss*y_ss;
muc_ss = 0;
mun_ss = 0;
mul_ss = 0;
cons_share=c_ss/y_ss
inv_share=x_ss/y_ss
gov_share=g_ss/y_ss
value_of_life=1/(1-betta)*(log(c_ss)-theta/2*n_ss^2)*c_ss
value_of_life = 1/(1-betta)*y_ss
ann_capoutputratio=k_ss/(52*y_ss)
thetaval=theta
Aval=A
go_calibrate_pi;
pi1_final=pi1;
pi2_final=pi2;
pi3_final=pi3;
xi_final=xi;
ro_final = ro_ini;
M_.params(strmatch('pi1',M_.param_names,'exact'))=pi1_final;
M_.params(strmatch('pi2',M_.param_names,'exact'))=pi2_final;
M_.params(strmatch('pi3',M_.param_names,'exact'))=pi3_final/3;
%
% INITVAL instructions
%
options_.initval_file = false;
oo_.steady_state(1) = y_ss;
oo_.steady_state(2) = k_ss;
oo_.steady_state(3) = n_ss;
oo_.steady_state(4) = w_ss;
oo_.steady_state(5) = rk_ss;
oo_.steady_state(6) = x_ss;
oo_.steady_state(7) = c_ss;
oo_.steady_state(8) = 1;
oo_.steady_state(9) = 0;
oo_.steady_state(10) = 0;
oo_.steady_state(11) = ns_ss;
oo_.steady_state(12) = ni_ss;
oo_.steady_state(13) = nr_ss;
oo_.steady_state(14) = cs_ss;
oo_.steady_state(15) = ci_ss;
oo_.steady_state(16) = cr_ss;
oo_.steady_state(17) = tau_ss;
oo_.steady_state(18) = lambtilde_ss;
oo_.steady_state(19) = lamtau_ss;
oo_.steady_state(20) = lami_ss;
oo_.steady_state(21) = lams_ss;
oo_.steady_state(22) = lamr_ss;
oo_.steady_state(23) = 0;
oo_.steady_state(24) = 1;
oo_.steady_state(31) = dcs_ss;
oo_.steady_state(32) = dns_ss;
oo_.steady_state(33) = dci_ss;
oo_.steady_state(34) = dni_ss;
oo_.steady_state(35) = dw_ss;
oo_.steady_state(36) = dlams_ss;
oo_.steady_state(37) = dlamtau_ss;
oo_.steady_state(38) = dlambtilde_ss;
oo_.steady_state(39) = dlami_ss;
oo_.steady_state(40) = dlamr_ss;
oo_.steady_state(41) = dcr_ss;
oo_.steady_state(42) = dnr_ss;
oo_.steady_state(43) = drk_ss;
oo_.steady_state(30) = rr_ss;
oo_.steady_state(25) = Rb_ss;
oo_.steady_state(26) = pie_ss;
oo_.steady_state(27) = mc_ss;
oo_.steady_state(28) = F_ss;
oo_.steady_state(29) = Kf_ss;
oo_.steady_state(44) = 1;
oo_.steady_state(45) = 1;
oo_.steady_state(46) = 1;
oo_.steady_state(47) = 1;
oo_.steady_state(52) = y_ss;
oo_.steady_state(53) = k_ss;
oo_.steady_state(54) = n_ss;
oo_.steady_state(55) = w_ss;
oo_.steady_state(56) = rk_ss;
oo_.steady_state(57) = x_ss;
oo_.steady_state(58) = c_ss;
oo_.steady_state(59) = 1;
oo_.steady_state(60) = 0;
oo_.steady_state(61) = 0;
oo_.steady_state(62) = ns_ss;
oo_.steady_state(63) = ni_ss;
oo_.steady_state(64) = nr_ss;
oo_.steady_state(65) = cs_ss;
oo_.steady_state(66) = ci_ss;
oo_.steady_state(67) = cr_ss;
oo_.steady_state(68) = tau_ss;
oo_.steady_state(69) = lambtilde_ss;
oo_.steady_state(70) = lamtau_ss;
oo_.steady_state(71) = lami_ss;
oo_.steady_state(72) = lams_ss;
oo_.steady_state(73) = lamr_ss;
oo_.steady_state(74) = 0;
oo_.steady_state(75) = 1;
oo_.steady_state(82) = dcs_ss;
oo_.steady_state(83) = dns_ss;
oo_.steady_state(84) = dci_ss;
oo_.steady_state(85) = dni_ss;
oo_.steady_state(86) = dw_ss;
oo_.steady_state(87) = dlams_ss;
oo_.steady_state(88) = dlamtau_ss;
oo_.steady_state(89) = dlambtilde_ss;
oo_.steady_state(90) = dlami_ss;
oo_.steady_state(91) = dlamr_ss;
oo_.steady_state(92) = dcr_ss;
oo_.steady_state(93) = dnr_ss;
oo_.steady_state(94) = drk_ss;
oo_.steady_state(81) = rr_ss;
oo_.steady_state(76) = Rb_ss;
oo_.steady_state(77) = pie_ss;
oo_.steady_state(78) = mc_ss;
oo_.steady_state(79) = FF_ss;
oo_.steady_state(80) = KfF_ss;
oo_.steady_state(95) = 1;
oo_.steady_state(96) = 1;
oo_.steady_state(97) = 1;
oo_.steady_state(98) = 1;
oo_.steady_state(48) = muc_ss;
oo_.steady_state(49) = mun_ss;
oo_.steady_state(50) = mul_ss;
oo_.steady_state(51) = M_.params(21);
if M_.exo_nbr > 0
	oo_.exo_simul = ones(M_.maximum_lag,1)*oo_.exo_steady_state';
end
if M_.exo_det_nbr > 0
	oo_.exo_det_simul = ones(M_.maximum_lag,1)*oo_.exo_det_steady_state';
end
options_resid_ = struct();
display_static_residuals(M_, options_, oo_, options_resid_);
steady;
options_resid_ = struct();
display_static_residuals(M_, options_, oo_, options_resid_);
M_.endo_histval=oo_.steady_state;
M_.endo_histval(strmatch('i',M_.endo_names,'exact'))=i_ini;
M_.endo_histval(strmatch('s',M_.endo_names,'exact'))=1-i_ini;
M_.endo_histval(strmatch('iF',M_.endo_names,'exact'))=i_ini;
M_.endo_histval(strmatch('sF',M_.endo_names,'exact'))=1-i_ini;
M_.params(strmatch('xi',M_.param_names,'exact'))=xi_final/1.2;
M_.params(strmatch('ro_ini',M_.param_names,'exact')) = ro_final/4;
sequence_of_shocks_consumption =  [0.25;zeros(32,1);0.029;zeros(5,1);0.12];                                                                               
sequence_of_shocks_labour      =  [0.23;zeros(32,1);0.02;zeros(5,1);0.09];                                                      
sequence_of_shocks_random      =  [0.55;zeros(32,1);0.13;zeros(5,1);0.67];  
sequence_of_shocks_persistency =  [0.00;zeros(5,1); (0.00)];     
%
% SHOCKS instructions
%
M_.det_shocks = [ M_.det_shocks;
struct('exo_det',false,'exo_id',1,'type','level','periods',12:51,'value',sequence_of_shocks_consumption) ];
M_.det_shocks = [ M_.det_shocks;
struct('exo_det',false,'exo_id',2,'type','level','periods',12:51,'value',sequence_of_shocks_labour) ];
M_.det_shocks = [ M_.det_shocks;
struct('exo_det',false,'exo_id',3,'type','level','periods',12:51,'value',sequence_of_shocks_random) ];
M_.det_shocks = [ M_.det_shocks;
struct('exo_det',false,'exo_id',4,'type','level','periods',45:51,'value',sequence_of_shocks_persistency) ];
M_.exo_det_length = 0;
options_.slowc=1;
options_.simul.maxit=100;
options_.periods = 500;
options_.stack_solve_algo = 0;
oo_ = perfect_foresight_setup(M_, options_, oo_);
[oo_, Simulated_time_series] = perfect_foresight_solver(M_, options_, oo_);
pi3_final_steps_vec=[pi3_final/3:0.007:pi3_final,pi3_final];
for pi3_final_step=pi3_final_steps_vec
pi3_final_step
M_.params(strmatch('pi3',M_.param_names,'exact'))=pi3_final_step;
[oo_.endo_simul, oo_.deterministic_simulation] = sim1(oo_.endo_simul, oo_.exo_simul, oo_.steady_state, M_, options_); 
end
xi_final_steps_vec=[M_.params(strmatch('xi',M_.param_names,'exact')):0.005:xi_final];
for xi_final_step=xi_final_steps_vec
xi_final_step
M_.params(strmatch('xi',M_.param_names,'exact'))=xi_final_step;
[oo_.endo_simul, oo_.deterministic_simulation] = sim1(oo_.endo_simul, oo_.exo_simul, oo_.steady_state, M_, options_); 
end
M_.params(strmatch('pi1',M_.param_names,'exact'))=pi1_final;
M_.params(strmatch('pi2',M_.param_names,'exact'))=pi2_final;
M_.params(strmatch('pi3',M_.param_names,'exact'))=pi3_final;
M_.params(strmatch('xi',M_.param_names,'exact'))=xi_final;
M_.params(strmatch('ro_ini',M_.param_names, 'exact'))=ro_final;
[oo_.endo_simul, oo_.deterministic_simulation] = sim1(oo_.endo_simul, oo_.exo_simul, oo_.steady_state, M_, options_); 
dyn2vec(M_, oo_, options_);   


oo_.time = toc(tic0);
disp(['Total computing time : ' dynsec2hms(oo_.time) ]);
if ~exist([M_.dname filesep 'Output'],'dir')
    mkdir(M_.dname,'Output');
end
save([M_.dname filesep 'Output' filesep 'solve_results.mat'], 'oo_', 'M_', 'options_');
if exist('estim_params_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'solve_results.mat'], 'estim_params_', '-append');
end
if exist('bayestopt_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'solve_results.mat'], 'bayestopt_', '-append');
end
if exist('dataset_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'solve_results.mat'], 'dataset_', '-append');
end
if exist('estimation_info', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'solve_results.mat'], 'estimation_info', '-append');
end
if exist('dataset_info', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'solve_results.mat'], 'dataset_info', '-append');
end
if exist('oo_recursive_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'solve_results.mat'], 'oo_recursive_', '-append');
end
if exist('options_mom_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'solve_results.mat'], 'options_mom_', '-append');
end
disp('Note: 1 warning(s) encountered in the preprocessor')
if ~isempty(lastwarn)
  disp('Note: warning(s) encountered in MATLAB/Octave code')
end
